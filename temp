CPPFILES =    ./src/Clock_Driver.cpp ./src/GPIO_Driver.cpp ./src/main.cpp ./src/NVIC_Drivers.cpp ./src/stm32_startup.cpp ./src/SysTick.cpp ./src/UART_Driver.cpp  ./src/Utility/MCU_Utilities.cpp ./src/Utility/m_memory.cpp
OBJECTS = out/Clock_Driver.o out/GPIO_Driver.o out/main.o out/NVIC_Drivers.o out/stm32_startup.o out/SysTick.o out/UART_Driver.o out/MCU_Utilities.o out/m_memory.o
arm-none-eabi-objdump -xS -C arm bin/bootloader.elf

bin/bootloader.elf:     file format elf32-littlearm
bin/bootloader.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000929

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x0000132c memsz 0x0000132c flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x0800132c align 2**16
         filesz 0x0000001c memsz 0x0000001c flags rw-
    LOAD off    0x00021348 vaddr 0x08001348 paddr 0x08001348 align 2**16
         filesz 0x00000368 memsz 0x00000368 flags rw-
    LOAD off    0x0000001c vaddr 0x2000001c paddr 0x2000001c align 2**16
         filesz 0x00000000 memsz 0x0000035c flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001198  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000001c  20000000  0800132c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rodata       00000368  08001348  08001348  00021348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000035c  2000001c  2000001c  0003001c  2**2
                  ALLOC
  5 .debug_info   00004930  00000000  00000000  000216b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00001109  00000000  00000000  00025fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000158  00000000  00000000  000270e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001896  00000000  00000000  00027241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00001936  00000000  00000000  00028ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000049  00000000  00000000  0002a40d  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 0000002c  00000000  00000000  0002a456  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000007cc  00000000  00000000  0002a484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000060  00000000  00000000  0002ac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000194 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
08001348 l    d  .rodata	00000000 .rodata
2000001c l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 stm32_startup.cpp
00000000 l    df *ABS*	00000000 Clock_Driver.cpp
08001348 l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
0800134c l     O .rodata	00000004 RCC_ADDRESS
08001350 l     O .rodata	00000004 CRC_ADDRESS
08001354 l     O .rodata	00000004 GPIOA_ADDRESS
08001358 l     O .rodata	00000004 GPIOB_ADDRESS
0800135c l     O .rodata	00000004 GPIOC_ADDRESS
08001360 l     O .rodata	00000004 GPIOD_ADDRESS
08001364 l     O .rodata	00000004 GPIOE_ADDRESS
08001368 l     O .rodata	00000004 GPIOH_ADDRESS
0800136c l     O .rodata	00000004 EXTI_ADDRESS
08001370 l     O .rodata	00000004 SYSCFG_ADDRESS
08001374 l     O .rodata	00000004 USART2_ADDRESS
08001378 l     O .rodata	00000004 USART1_ADDRESS
0800137c l     O .rodata	00000004 USART6_ADDRESS
08001380 l     O .rodata	00000004 SECTOR0_ADDRESS
08001384 l     O .rodata	00000004 SECTOR1_ADDRESS
08001388 l     O .rodata	00000004 SECTOR2_ADDRESS
0800138c l     O .rodata	00000004 SECTOR3_ADDRESS
08001390 l     O .rodata	00000004 SECTOR4_ADDRESS
08001394 l     O .rodata	00000004 SECTOR5_ADDRESS
08001398 l     O .rodata	00000004 SECTOR6_ADDRESS
0800139c l     O .rodata	00000004 SECTOR7_ADDRESS
00000000 l    df *ABS*	00000000 GPIO_Driver.cpp
080013a4 l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
080013a8 l     O .rodata	00000004 RCC_ADDRESS
080013ac l     O .rodata	00000004 CRC_ADDRESS
080013b0 l     O .rodata	00000004 GPIOA_ADDRESS
080013b4 l     O .rodata	00000004 GPIOB_ADDRESS
080013b8 l     O .rodata	00000004 GPIOC_ADDRESS
080013bc l     O .rodata	00000004 GPIOD_ADDRESS
080013c0 l     O .rodata	00000004 GPIOE_ADDRESS
080013c4 l     O .rodata	00000004 GPIOH_ADDRESS
080013c8 l     O .rodata	00000004 EXTI_ADDRESS
080013cc l     O .rodata	00000004 SYSCFG_ADDRESS
080013d0 l     O .rodata	00000004 USART2_ADDRESS
080013d4 l     O .rodata	00000004 USART1_ADDRESS
080013d8 l     O .rodata	00000004 USART6_ADDRESS
080013dc l     O .rodata	00000004 SECTOR0_ADDRESS
080013e0 l     O .rodata	00000004 SECTOR1_ADDRESS
080013e4 l     O .rodata	00000004 SECTOR2_ADDRESS
080013e8 l     O .rodata	00000004 SECTOR3_ADDRESS
080013ec l     O .rodata	00000004 SECTOR4_ADDRESS
080013f0 l     O .rodata	00000004 SECTOR5_ADDRESS
080013f4 l     O .rodata	00000004 SECTOR6_ADDRESS
080013f8 l     O .rodata	00000004 SECTOR7_ADDRESS
00000000 l    df *ABS*	00000000 main.cpp
080013fc l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
08001400 l     O .rodata	00000004 RCC_ADDRESS
08001404 l     O .rodata	00000004 CRC_ADDRESS
08001408 l     O .rodata	00000004 GPIOA_ADDRESS
0800140c l     O .rodata	00000004 GPIOB_ADDRESS
08001410 l     O .rodata	00000004 GPIOC_ADDRESS
08001414 l     O .rodata	00000004 GPIOD_ADDRESS
08001418 l     O .rodata	00000004 GPIOE_ADDRESS
0800141c l     O .rodata	00000004 GPIOH_ADDRESS
08001420 l     O .rodata	00000004 EXTI_ADDRESS
08001424 l     O .rodata	00000004 SYSCFG_ADDRESS
08001428 l     O .rodata	00000004 USART2_ADDRESS
0800142c l     O .rodata	00000004 USART1_ADDRESS
08001430 l     O .rodata	00000004 USART6_ADDRESS
08001434 l     O .rodata	00000004 SECTOR0_ADDRESS
08001438 l     O .rodata	00000004 SECTOR1_ADDRESS
0800143c l     O .rodata	00000004 SECTOR2_ADDRESS
08001440 l     O .rodata	00000004 SECTOR3_ADDRESS
08001444 l     O .rodata	00000004 SECTOR4_ADDRESS
08001448 l     O .rodata	00000004 SECTOR5_ADDRESS
0800144c l     O .rodata	00000004 SECTOR6_ADDRESS
08001450 l     O .rodata	00000004 SECTOR7_ADDRESS
08001454 l     O .rodata	00000004 NVIC_ISER_ADDRESS
08001458 l     O .rodata	00000004 NVIC_ICER_ADDRESS
0800145c l     O .rodata	00000004 NVIC_ISPR_ADDRESS
08001460 l     O .rodata	00000004 NVIC_ICPR_ADDRESS
08001464 l     O .rodata	00000004 NVIC_IABR_ADDRESS
08001468 l     O .rodata	00000004 NVIC_IPR_ADDRESS
0800146c l     O .rodata	00000004 NVIC_STIR_ADDRESS
08001470 l     O .rodata	00000004 SYST_CSR_ADRESS
08001474 l     O .rodata	00000004 SYST_RVR_ADRESS
08001478 l     O .rodata	00000004 SYST_CVR_ADRESS
0800147c l     O .rodata	00000004 SYST_CALIB_ADRESS
08001480 l     O .rodata	00000004 VTOR_ADDRESS
08001484 l     O .rodata	00000004 BOOTLOADER_VT_ADDRESS
08001488 l     O .rodata	00000004 USER_APP_VT_ADDRESS
0800148c l     O .rodata	00000001 NrOfNVICIntSetEnableRegs
0800148d l     O .rodata	00000001 NrOfNVICIntClearEnableRegs
0800148e l     O .rodata	00000001 NrOfNVICIntSetPendingRegs
0800148f l     O .rodata	00000001 NrOfNVICIntClearPendingRegs
08001490 l     O .rodata	00000001 NrOfNVICIntActivateBitRegs
08001491 l     O .rodata	00000001 NrOfNVICIntPrioRegs
00000000 l    df *ABS*	00000000 NVIC_Drivers.cpp
080014c8 l     O .rodata	00000004 NVIC_ISER_ADDRESS
080014cc l     O .rodata	00000004 NVIC_ICER_ADDRESS
080014d0 l     O .rodata	00000004 NVIC_ISPR_ADDRESS
080014d4 l     O .rodata	00000004 NVIC_ICPR_ADDRESS
080014d8 l     O .rodata	00000004 NVIC_IABR_ADDRESS
080014dc l     O .rodata	00000004 NVIC_IPR_ADDRESS
080014e0 l     O .rodata	00000004 NVIC_STIR_ADDRESS
080014e4 l     O .rodata	00000004 SYST_CSR_ADRESS
080014e8 l     O .rodata	00000004 SYST_RVR_ADRESS
080014ec l     O .rodata	00000004 SYST_CVR_ADRESS
080014f0 l     O .rodata	00000004 SYST_CALIB_ADRESS
080014f4 l     O .rodata	00000004 VTOR_ADDRESS
080014f8 l     O .rodata	00000001 NrOfNVICIntSetEnableRegs
080014f9 l     O .rodata	00000001 NrOfNVICIntClearEnableRegs
080014fa l     O .rodata	00000001 NrOfNVICIntSetPendingRegs
080014fb l     O .rodata	00000001 NrOfNVICIntClearPendingRegs
080014fc l     O .rodata	00000001 NrOfNVICIntActivateBitRegs
080014fd l     O .rodata	00000001 NrOfNVICIntPrioRegs
00000000 l    df *ABS*	00000000 SysTick.cpp
08001500 l     O .rodata	00000004 NVIC_ISER_ADDRESS
08001504 l     O .rodata	00000004 NVIC_ICER_ADDRESS
08001508 l     O .rodata	00000004 NVIC_ISPR_ADDRESS
0800150c l     O .rodata	00000004 NVIC_ICPR_ADDRESS
08001510 l     O .rodata	00000004 NVIC_IABR_ADDRESS
08001514 l     O .rodata	00000004 NVIC_IPR_ADDRESS
08001518 l     O .rodata	00000004 NVIC_STIR_ADDRESS
0800151c l     O .rodata	00000004 SYST_CSR_ADRESS
08001520 l     O .rodata	00000004 SYST_RVR_ADRESS
08001524 l     O .rodata	00000004 SYST_CVR_ADRESS
08001528 l     O .rodata	00000004 SYST_CALIB_ADRESS
0800152c l     O .rodata	00000004 VTOR_ADDRESS
00000000 l    df *ABS*	00000000 UART_Driver.cpp
08001534 l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
08001538 l     O .rodata	00000004 RCC_ADDRESS
0800153c l     O .rodata	00000004 CRC_ADDRESS
08001540 l     O .rodata	00000004 GPIOA_ADDRESS
08001544 l     O .rodata	00000004 GPIOB_ADDRESS
08001548 l     O .rodata	00000004 GPIOC_ADDRESS
0800154c l     O .rodata	00000004 GPIOD_ADDRESS
08001550 l     O .rodata	00000004 GPIOE_ADDRESS
08001554 l     O .rodata	00000004 GPIOH_ADDRESS
08001558 l     O .rodata	00000004 EXTI_ADDRESS
0800155c l     O .rodata	00000004 SYSCFG_ADDRESS
08001560 l     O .rodata	00000004 USART2_ADDRESS
08001564 l     O .rodata	00000004 USART1_ADDRESS
08001568 l     O .rodata	00000004 USART6_ADDRESS
0800156c l     O .rodata	00000004 SECTOR0_ADDRESS
08001570 l     O .rodata	00000004 SECTOR1_ADDRESS
08001574 l     O .rodata	00000004 SECTOR2_ADDRESS
08001578 l     O .rodata	00000004 SECTOR3_ADDRESS
0800157c l     O .rodata	00000004 SECTOR4_ADDRESS
08001580 l     O .rodata	00000004 SECTOR5_ADDRESS
08001584 l     O .rodata	00000004 SECTOR6_ADDRESS
08001588 l     O .rodata	00000004 SECTOR7_ADDRESS
0800158c l     O .rodata	00000004 NVIC_ISER_ADDRESS
08001590 l     O .rodata	00000004 NVIC_ICER_ADDRESS
08001594 l     O .rodata	00000004 NVIC_ISPR_ADDRESS
08001598 l     O .rodata	00000004 NVIC_ICPR_ADDRESS
0800159c l     O .rodata	00000004 NVIC_IABR_ADDRESS
080015a0 l     O .rodata	00000004 NVIC_IPR_ADDRESS
080015a4 l     O .rodata	00000004 NVIC_STIR_ADDRESS
080015a8 l     O .rodata	00000004 SYST_CSR_ADRESS
080015ac l     O .rodata	00000004 SYST_RVR_ADRESS
080015b0 l     O .rodata	00000004 SYST_CVR_ADRESS
080015b4 l     O .rodata	00000004 SYST_CALIB_ADRESS
080015b8 l     O .rodata	00000004 VTOR_ADDRESS
080015bc l     O .rodata	00000004 BOOTLOADER_VT_ADDRESS
080015c0 l     O .rodata	00000004 USER_APP_VT_ADDRESS
080015c4 l     O .rodata	00000001 NrOfNVICIntSetEnableRegs
080015c5 l     O .rodata	00000001 NrOfNVICIntClearEnableRegs
080015c6 l     O .rodata	00000001 NrOfNVICIntSetPendingRegs
080015c7 l     O .rodata	00000001 NrOfNVICIntClearPendingRegs
080015c8 l     O .rodata	00000001 NrOfNVICIntActivateBitRegs
080015c9 l     O .rodata	00000001 NrOfNVICIntPrioRegs
080015cc l     O .rodata	00000050 BaudrateLookUpTable
08001230 l     F .text	00000054 __static_initialization_and_destruction_0(int, int)
08001284 l     F .text	00000010 _GLOBAL__sub_I_USART2
00000000 l    df *ABS*	00000000 MCU_Utilities.cpp
0800161c l     O .rodata	00000004 NVIC_ISER_ADDRESS
08001620 l     O .rodata	00000004 NVIC_ICER_ADDRESS
08001624 l     O .rodata	00000004 NVIC_ISPR_ADDRESS
08001628 l     O .rodata	00000004 NVIC_ICPR_ADDRESS
0800162c l     O .rodata	00000004 NVIC_IABR_ADDRESS
08001630 l     O .rodata	00000004 NVIC_IPR_ADDRESS
08001634 l     O .rodata	00000004 NVIC_STIR_ADDRESS
08001638 l     O .rodata	00000004 SYST_CSR_ADRESS
0800163c l     O .rodata	00000004 SYST_RVR_ADRESS
08001640 l     O .rodata	00000004 SYST_CVR_ADRESS
08001644 l     O .rodata	00000004 SYST_CALIB_ADRESS
08001648 l     O .rodata	00000004 VTOR_ADDRESS
0800164c l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
08001650 l     O .rodata	00000004 RCC_ADDRESS
08001654 l     O .rodata	00000004 CRC_ADDRESS
08001658 l     O .rodata	00000004 GPIOA_ADDRESS
0800165c l     O .rodata	00000004 GPIOB_ADDRESS
08001660 l     O .rodata	00000004 GPIOC_ADDRESS
08001664 l     O .rodata	00000004 GPIOD_ADDRESS
08001668 l     O .rodata	00000004 GPIOE_ADDRESS
0800166c l     O .rodata	00000004 GPIOH_ADDRESS
08001670 l     O .rodata	00000004 EXTI_ADDRESS
08001674 l     O .rodata	00000004 SYSCFG_ADDRESS
08001678 l     O .rodata	00000004 USART2_ADDRESS
0800167c l     O .rodata	00000004 USART1_ADDRESS
08001680 l     O .rodata	00000004 USART6_ADDRESS
08001684 l     O .rodata	00000004 SECTOR0_ADDRESS
08001688 l     O .rodata	00000004 SECTOR1_ADDRESS
0800168c l     O .rodata	00000004 SECTOR2_ADDRESS
08001690 l     O .rodata	00000004 SECTOR3_ADDRESS
08001694 l     O .rodata	00000004 SECTOR4_ADDRESS
08001698 l     O .rodata	00000004 SECTOR5_ADDRESS
0800169c l     O .rodata	00000004 SECTOR6_ADDRESS
080016a0 l     O .rodata	00000004 SECTOR7_ADDRESS
080016a4 l     O .rodata	00000004 BOOTLOADER_VT_ADDRESS
080016a8 l     O .rodata	00000004 USER_APP_VT_ADDRESS
00000000 l    df *ABS*	00000000 m_memory.cpp
00000000 l    df *ABS*	00000000 lib_a-strlen.o
08000928 g     F .text	00000014 Reset_Handler()
08000648 g     F .text	00000040 NVIC::NVIC_EnableInterrupt(unsigned char)
08001294  w    F .text	0000004e USART::USART(USART_Registers_t*)
08001018 g     F .text	000000ec USART::ReadIT(unsigned char*, unsigned long, unsigned long)
08000710 g     F .text	00000044 NVIC::NVIC_ClearInterruptPending(unsigned char)
08000d04 g     F .text	00000136 USART::Print(char const*, unsigned long, unsigned long)
0800132c g       .text	00000000 _text_end
08000a8c g     F .text	00000110 USART::ConfigBaudRate(unsigned long)
20000024 g     O .bss	00000014 USART2
0800093c g     F .text	0000001c Systick_Interrupt()
08000614  w    F .text	00000034 JumpToUserApp()
08000818 g     F .text	00000016 EnableAllInterrupts()
08000258 g     F .text	00000042 GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)
20000020 g     O .bss	00000004 SysTick::globalTime
2000001c g       .bss	00000000 _bss_start
080001b0 g     F .text	0000001c Clock::EnableClock_GPIOA()
080008e8 g     F .text	00000040 call_ctors()
08000efc g     F .text	0000011c USART::PrintIT(char const*, unsigned long, unsigned long)
08000a04 g     F .text	0000001c SysTick::DisableInt()
080016b0 g       .rodata	00000000 _init_array_end
080009b0 g     F .text	00000038 SysTick::SetTickSrc(SYSTICK_ClockSrc)
08000688 g     F .text	00000044 NVIC::NVIC_DisableInterrupt(unsigned char)
08000e3a g     F .text	000000c2 USART::Read(unsigned char*, unsigned long, unsigned long)
080005f0  w    F .text	00000022 GetUserButtonState(GPIO const&)
08000194 g     F .text	0000001c Clock::EnableClock_USART2()
20000378 g       .bss	00000000 _bss_end
08000578  w    F .text	0000001c SetVTOR(unsigned long)
20000168 g     O .bss	00000108 USART::USART2_MessageStr
20000270 g     O .bss	00000108 USART::USART6_MessageStr
080013a0 g     O .rodata	00000004 Clock::registers
080009e8 g     F .text	0000001c SysTick::EnableInt()
080001e8 g     F .text	0000001c Clock::EnableClock_GPIOC()
08000000 g     O .isr_vector	00000194 vector_table
20000378 g       .bss	00000000 end
08000974 g     F .text	0000001c SysTick::Disable()
08000990 g     F .text	00000020 SysTick::SetReloadValue(unsigned long)
08000594  w    F .text	00000016 SetStackPointer(unsigned long)
080005d0  w    F .text	00000020 SetGlobalTimer()
08000220 g     F .text	0000001c Clock::EnableClock_GPIOE()
080006cc g     F .text	00000044 NVIC::NVIC_SetInterruptPending(unsigned char)
20000000 g       .data	00000000 _data_start
08000864 g     F .text	00000084 init_ram()
2000001c g     O .bss	00000004 bss_size
2000001c g       .data	00000000 _data_end
20000060 g     O .bss	00000108 USART::USART1_MessageStr
08000488 g     F .text	000000f0 main
0800023c g     F .text	0000001c Clock::EnableClock_GPIOH()
2000004c g     O .bss	00000014 USART6
08000b9c g     F .text	00000168 USART::Init()
080012e2 g     F .text	0000003a m_memcpy(void*, void const*, unsigned long)
08000434 g     F .text	00000054 GPIO::GPIO_WritePin(PIN_State_t)
08000a20 g     F .text	00000014 SysTick::GetGlobalTime()
080005aa  w    F .text	00000026 GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)
08001530 g     O .rodata	00000004 SysTick::registers
08001104 g     F .text	0000012c USART2_Interrupt()
080005aa  w    F .text	00000026 GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)
08000204 g     F .text	0000001c Clock::EnableClock_GPIOD()
08000754 g     F .text	00000040 NVIC::NVIC_GetInterruptPendingStatus(unsigned char)
20000038 g     O .bss	00000014 USART1
08000844 g     F .text	00000020 SetBasePriority(unsigned long)
08000958 g     F .text	0000001c SysTick::Enable()
0800082e g     F .text	00000016 DisableAllInterrupts()
080007dc g     F .text	0000003c NVIC::NVIC_GetInterruptPriority(unsigned char)
08001294  w    F .text	0000004e USART::USART(USART_Registers_t*)
20000000 g     O .data	0000001c NVIC::registers
0800131c g     F .text	0000000e strlen
080003fc g     F .text	00000038 GPIO::GPIO_ReadPin() const
08000a34 g     F .text	00000058 USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t, bool, void (*)())
080016ac g       .rodata	00000000 _init_array_start
08000794 g     F .text	00000048 NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)
0800029a g     F .text	00000162 GPIO::Init()
080001cc g     F .text	0000001c Clock::EnableClock_GPIOB()



Disassembly of section .text:

08000194 <Clock::EnableClock_USART2()>:

volatile clock_registers_t * const Clock::registers = (clock_registers_t *)RCC_ADDRESS;


void Clock::EnableClock_USART2(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
    Clock::registers->APB1ENR |= (1 << RCC_APB1ENR_BitPos::USART2_EN);
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <Clock::EnableClock_USART2()+0x18>)
 800019a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <Clock::EnableClock_USART2()+0x18>)
 800019e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023800 	.word	0x40023800

080001b0 <Clock::EnableClock_GPIOA()>:

void Clock::EnableClock_GPIOA(void) 
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    Clock::registers->AHB1ENR |= (1 << RCC_AHB1ENR_BitPos::GPIOA_EN);
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <Clock::EnableClock_GPIOA()+0x18>)
 80001b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <Clock::EnableClock_GPIOA()+0x18>)
 80001ba:	f043 0301 	orr.w	r3, r3, #1
 80001be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40023800 	.word	0x40023800

080001cc <Clock::EnableClock_GPIOB()>:

void Clock::EnableClock_GPIOB(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
    Clock::registers->AHB1ENR |= (1 << RCC_AHB1ENR_BitPos::GPIOB_EN);
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <Clock::EnableClock_GPIOB()+0x18>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d4:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <Clock::EnableClock_GPIOB()+0x18>)
 80001d6:	f043 0302 	orr.w	r3, r3, #2
 80001da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	40023800 	.word	0x40023800

080001e8 <Clock::EnableClock_GPIOC()>:

void Clock::EnableClock_GPIOC(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
    Clock::registers->AHB1ENR |= (1 << RCC_AHB1ENR_BitPos::GPIOC_EN);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <Clock::EnableClock_GPIOC()+0x18>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <Clock::EnableClock_GPIOC()+0x18>)
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	40023800 	.word	0x40023800

08000204 <Clock::EnableClock_GPIOD()>:

void Clock::EnableClock_GPIOD(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    Clock::registers->AHB1ENR |= (1 << RCC_AHB1ENR_BitPos::GPIOD_EN);
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <Clock::EnableClock_GPIOD()+0x18>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a03      	ldr	r2, [pc, #12]	; (800021c <Clock::EnableClock_GPIOD()+0x18>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40023800 	.word	0x40023800

08000220 <Clock::EnableClock_GPIOE()>:

void Clock::EnableClock_GPIOE(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
    Clock::registers->AHB1ENR |= (1 << RCC_AHB1ENR_BitPos::GPIOE_EN);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <Clock::EnableClock_GPIOE()+0x18>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <Clock::EnableClock_GPIOE()+0x18>)
 800022a:	f043 0310 	orr.w	r3, r3, #16
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	40023800 	.word	0x40023800

0800023c <Clock::EnableClock_GPIOH()>:

void Clock::EnableClock_GPIOH(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
    Clock::registers->AHB1ENR |= (1 << RCC_AHB1ENR_BitPos::GPIOH_EN);
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <Clock::EnableClock_GPIOH()+0x18>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <Clock::EnableClock_GPIOH()+0x18>)
 8000246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40023800 	.word	0x40023800

08000258 <GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)>:
#include "GPIO_Driver.h"

void GPIO::Config(GPIO_port_mode_t mode, GPIO_port_output_config_t output_configuration, GPIO_port_speed_t speed, GPIO_port_pull_t pull_configuration, GPIO_port_alternatefunction_t alternate_function)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	4608      	mov	r0, r1
 8000262:	4611      	mov	r1, r2
 8000264:	461a      	mov	r2, r3
 8000266:	4603      	mov	r3, r0
 8000268:	70fb      	strb	r3, [r7, #3]
 800026a:	460b      	mov	r3, r1
 800026c:	70bb      	strb	r3, [r7, #2]
 800026e:	4613      	mov	r3, r2
 8000270:	707b      	strb	r3, [r7, #1]
    this->mode = mode;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	78fa      	ldrb	r2, [r7, #3]
 8000276:	701a      	strb	r2, [r3, #0]
    this->output_configuration = output_configuration;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	78ba      	ldrb	r2, [r7, #2]
 800027c:	705a      	strb	r2, [r3, #1]
    this->speed = speed;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	787a      	ldrb	r2, [r7, #1]
 8000282:	709a      	strb	r2, [r3, #2]
    this->pull_configuration = pull_configuration;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	7c3a      	ldrb	r2, [r7, #16]
 8000288:	70da      	strb	r2, [r3, #3]
    this->alternate_function = alternate_function;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	7d3a      	ldrb	r2, [r7, #20]
 800028e:	711a      	strb	r2, [r3, #4]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr

0800029a <GPIO::Init()>:

void GPIO::Init(void)
{
 800029a:	b580      	push	{r7, lr}
 800029c:	b082      	sub	sp, #8
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
    // 1. Enable GPIO clock
    if(this->registers == GPIOA) 
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	4a4f      	ldr	r2, [pc, #316]	; (80003e4 <GPIO::Init()+0x14a>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d102      	bne.n	80002b2 <GPIO::Init()+0x18>
        Clock::EnableClock_GPIOA();
 80002ac:	f7ff ff80 	bl	80001b0 <Clock::EnableClock_GPIOA()>
 80002b0:	e026      	b.n	8000300 <GPIO::Init()+0x66>
    else if(this->registers == GPIOB)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	4a4c      	ldr	r2, [pc, #304]	; (80003e8 <GPIO::Init()+0x14e>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d102      	bne.n	80002c2 <GPIO::Init()+0x28>
        Clock::EnableClock_GPIOB();
 80002bc:	f7ff ff86 	bl	80001cc <Clock::EnableClock_GPIOB()>
 80002c0:	e01e      	b.n	8000300 <GPIO::Init()+0x66>
    else if(this->registers == GPIOC)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	4a49      	ldr	r2, [pc, #292]	; (80003ec <GPIO::Init()+0x152>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d102      	bne.n	80002d2 <GPIO::Init()+0x38>
        Clock::EnableClock_GPIOC();
 80002cc:	f7ff ff8c 	bl	80001e8 <Clock::EnableClock_GPIOC()>
 80002d0:	e016      	b.n	8000300 <GPIO::Init()+0x66>
    else if(this->registers == GPIOD)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <GPIO::Init()+0x156>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d102      	bne.n	80002e2 <GPIO::Init()+0x48>
        Clock::EnableClock_GPIOD();
 80002dc:	f7ff ff92 	bl	8000204 <Clock::EnableClock_GPIOD()>
 80002e0:	e00e      	b.n	8000300 <GPIO::Init()+0x66>
    else if(this->registers == GPIOE)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	4a43      	ldr	r2, [pc, #268]	; (80003f4 <GPIO::Init()+0x15a>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d102      	bne.n	80002f2 <GPIO::Init()+0x58>
        Clock::EnableClock_GPIOE();
 80002ec:	f7ff ff98 	bl	8000220 <Clock::EnableClock_GPIOE()>
 80002f0:	e006      	b.n	8000300 <GPIO::Init()+0x66>
    else if(this->registers == GPIOH)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4a40      	ldr	r2, [pc, #256]	; (80003f8 <GPIO::Init()+0x15e>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d101      	bne.n	8000300 <GPIO::Init()+0x66>
        Clock::EnableClock_GPIOH();
 80002fc:	f7ff ff9e 	bl	800023c <Clock::EnableClock_GPIOH()>

    // 2. Set Mode register
    this->registers->MODER |= (this->mode << (this->pin * 2));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	4619      	mov	r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7b1b      	ldrb	r3, [r3, #12]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	4619      	mov	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	430a      	orrs	r2, r1
 800031e:	601a      	str	r2, [r3, #0]

    if(this->mode != INPUT)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d01e      	beq.n	8000366 <GPIO::Init()+0xcc>
    {    
        // 3. Set Output type register
        this->registers->OTYPER |= (this->output_configuration << this->pin);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	785b      	ldrb	r3, [r3, #1]
 8000332:	4619      	mov	r1, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	7b1b      	ldrb	r3, [r3, #12]
 8000338:	fa01 f303 	lsl.w	r3, r1, r3
 800033c:	4619      	mov	r1, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	430a      	orrs	r2, r1
 8000344:	605a      	str	r2, [r3, #4]

        // 4. Set pin output speed
        this->registers->OSPEEDR |= (this->speed << (this->pin * 2));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	789b      	ldrb	r3, [r3, #2]
 8000350:	4619      	mov	r1, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	7b1b      	ldrb	r3, [r3, #12]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	4619      	mov	r1, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	430a      	orrs	r2, r1
 8000364:	609a      	str	r2, [r3, #8]
    }

    // 5. Set PullUp/PullDown configuration
    this->registers->PUPDR |= (this->pull_configuration << (this->pin * 2));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	78db      	ldrb	r3, [r3, #3]
 8000370:	4619      	mov	r1, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	7b1b      	ldrb	r3, [r3, #12]
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	fa01 f303 	lsl.w	r3, r1, r3
 800037c:	4619      	mov	r1, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	430a      	orrs	r2, r1
 8000384:	60da      	str	r2, [r3, #12]

    if(this->mode == ALTERNATE_FUNCTION)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b02      	cmp	r3, #2
 800038c:	d125      	bne.n	80003da <GPIO::Init()+0x140>
        // 6. Set Alternate Function register
        this->pin < PIN8 ? (this->registers->AFRL |= this->alternate_function << (this->pin * 4)) : 
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7b1b      	ldrb	r3, [r3, #12]
 8000392:	2b07      	cmp	r3, #7
 8000394:	d810      	bhi.n	80003b8 <GPIO::Init()+0x11e>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	6a1a      	ldr	r2, [r3, #32]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	4619      	mov	r1, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	7b1b      	ldrb	r3, [r3, #12]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	621a      	str	r2, [r3, #32]
                           (this->registers->AFRH |= this->alternate_function << ((this->pin - 8) * 4));
}
 80003b6:	e010      	b.n	80003da <GPIO::Init()+0x140>
                           (this->registers->AFRH |= this->alternate_function << ((this->pin - 8) * 4));
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	4619      	mov	r1, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7b1b      	ldrb	r3, [r3, #12]
 80003c8:	3b08      	subs	r3, #8
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	fa01 f303 	lsl.w	r3, r1, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	430a      	orrs	r2, r1
 80003d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40020000 	.word	0x40020000
 80003e8:	40020400 	.word	0x40020400
 80003ec:	40020800 	.word	0x40020800
 80003f0:	40020c00 	.word	0x40020c00
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40021c00 	.word	0x40021c00

080003fc <GPIO::GPIO_ReadPin() const>:

PIN_State_t GPIO::GPIO_ReadPin(void) const
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
    if(this->registers->IDR & (1 << this->pin))
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	7b12      	ldrb	r2, [r2, #12]
 800040e:	4611      	mov	r1, r2
 8000410:	2201      	movs	r2, #1
 8000412:	408a      	lsls	r2, r1
 8000414:	4013      	ands	r3, r2
 8000416:	2b00      	cmp	r3, #0
 8000418:	bf14      	ite	ne
 800041a:	2301      	movne	r3, #1
 800041c:	2300      	moveq	r3, #0
 800041e:	b2db      	uxtb	r3, r3
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <GPIO::GPIO_ReadPin() const+0x2c>
        return PIN_HIGH;
 8000424:	2301      	movs	r3, #1
 8000426:	e000      	b.n	800042a <GPIO::GPIO_ReadPin() const+0x2e>
    else
        return PIN_LOW;  
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <GPIO::GPIO_WritePin(PIN_State_t)>:

void GPIO::GPIO_WritePin(PIN_State_t state)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	70fb      	strb	r3, [r7, #3]
    (state == PIN_LOW) ? (this->registers->BSRR |= (1 << (this->pin + ROFFSET))) : (this->registers->BSRR |= (1 << this->pin));
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10e      	bne.n	8000464 <GPIO::GPIO_WritePin(PIN_State_t)+0x30>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	699a      	ldr	r2, [r3, #24]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	7b1b      	ldrb	r3, [r3, #12]
 8000450:	3310      	adds	r3, #16
 8000452:	2101      	movs	r1, #1
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	4619      	mov	r1, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	430a      	orrs	r2, r1
 8000460:	619a      	str	r2, [r3, #24]
 8000462:	e00c      	b.n	800047e <GPIO::GPIO_WritePin(PIN_State_t)+0x4a>
    (state == PIN_LOW) ? (this->registers->BSRR |= (1 << (this->pin + ROFFSET))) : (this->registers->BSRR |= (1 << this->pin));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7b1b      	ldrb	r3, [r3, #12]
 800046e:	4619      	mov	r1, r3
 8000470:	2301      	movs	r3, #1
 8000472:	408b      	lsls	r3, r1
 8000474:	4619      	mov	r1, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	430a      	orrs	r2, r1
 800047c:	619a      	str	r2, [r3, #24]
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <main>:
#include "main.h"

int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08c      	sub	sp, #48	; 0x30
 800048c:	af04      	add	r7, sp, #16
    bool enterBootMode = false;
 800048e:	2300      	movs	r3, #0
 8000490:	77fb      	strb	r3, [r7, #31]
    SetBasePriority(0xFF);
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	f000 f9d6 	bl	8000844 <SetBasePriority(unsigned long)>
    EnableAllInterrupts();
 8000498:	f000 f9be 	bl	8000818 <EnableAllInterrupts()>
    // Set the interrupt priority for USART2
    NVIC::NVIC_SetInterruptPriority(USART2_INT_POS, 0xFFu);
 800049c:	21ff      	movs	r1, #255	; 0xff
 800049e:	2026      	movs	r0, #38	; 0x26
 80004a0:	f000 f978 	bl	8000794 <NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)>
    SetGlobalTimer();
 80004a4:	f000 f894 	bl	80005d0 <SetGlobalTimer()>
    GPIO userButton(GPIOC, PIN13);
 80004a8:	463b      	mov	r3, r7
 80004aa:	220d      	movs	r2, #13
 80004ac:	492e      	ldr	r1, [pc, #184]	; (8000568 <main+0xe0>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f87b 	bl	80005aa <GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)>
    userButton.Config(INPUT);
 80004b4:	4638      	mov	r0, r7
 80004b6:	2300      	movs	r3, #0
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2300      	movs	r3, #0
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2300      	movs	r3, #0
 80004c0:	2200      	movs	r2, #0
 80004c2:	2100      	movs	r1, #0
 80004c4:	f7ff fec8 	bl	8000258 <GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)>
    userButton.Init();
 80004c8:	463b      	mov	r3, r7
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fee5 	bl	800029a <GPIO::Init()>
    (void)USART2.Config(WORD_LENTGTH_8BIT, NO_PARITY, 9600, NO_STOPBITS_2);
 80004d0:	2300      	movs	r3, #0
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	2300      	movs	r3, #0
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2302      	movs	r3, #2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	4821      	ldr	r0, [pc, #132]	; (800056c <main+0xe4>)
 80004e6:	f000 faa5 	bl	8000a34 <USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t, bool, void (*)())>
    (void)USART2.Init();
 80004ea:	4820      	ldr	r0, [pc, #128]	; (800056c <main+0xe4>)
 80004ec:	f000 fb56 	bl	8000b9c <USART::Init()>

    uint32_t currentTime = SysTick::GetGlobalTime();
 80004f0:	f000 fa96 	bl	8000a20 <SysTick::GetGlobalTime()>
 80004f4:	61b8      	str	r0, [r7, #24]

    while( SysTick::GetGlobalTime() < (currentTime + BOOT_TIMEOUT) )
 80004f6:	f000 fa93 	bl	8000a20 <SysTick::GetGlobalTime()>
 80004fa:	4602      	mov	r2, r0
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	3303      	adds	r3, #3
 8000500:	429a      	cmp	r2, r3
 8000502:	bf34      	ite	cc
 8000504:	2301      	movcc	r3, #1
 8000506:	2300      	movcs	r3, #0
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00d      	beq.n	800052a <main+0xa2>
    {
        if(GetUserButtonState(userButton) == BUTTON_PRESSED)
 800050e:	463b      	mov	r3, r7
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f86d 	bl	80005f0 <GetUserButtonState(GPIO const&)>
 8000516:	4603      	mov	r3, r0
 8000518:	2b01      	cmp	r3, #1
 800051a:	bf0c      	ite	eq
 800051c:	2301      	moveq	r3, #1
 800051e:	2300      	movne	r3, #0
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0e7      	beq.n	80004f6 <main+0x6e>
        {
            enterBootMode = true;      
 8000526:	2301      	movs	r3, #1
 8000528:	77fb      	strb	r3, [r7, #31]
            break;
        }
    }

    if(enterBootMode == false)
 800052a:	7ffb      	ldrb	r3, [r7, #31]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10e      	bne.n	800054e <main+0xc6>
    {
        // jump to user application
        const char *msg = "Jumping to user app\r\n";
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <main+0xe8>)
 8000532:	613b      	str	r3, [r7, #16]
        USART2.Print(msg, strlen(msg),MAX_DELAY);
 8000534:	6938      	ldr	r0, [r7, #16]
 8000536:	f000 fef1 	bl	800131c <strlen>
 800053a:	4602      	mov	r2, r0
 800053c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000540:	6939      	ldr	r1, [r7, #16]
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <main+0xe4>)
 8000544:	f000 fbde 	bl	8000d04 <USART::Print(char const*, unsigned long, unsigned long)>
        JumpToUserApp();
 8000548:	f000 f864 	bl	8000614 <JumpToUserApp()>
 800054c:	e00b      	b.n	8000566 <main+0xde>
    }
    else
    {
        // jump to bootloader application 
        const char *msg = "Message from bootloader\r\n";
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <main+0xec>)
 8000550:	617b      	str	r3, [r7, #20]
        USART2.Print(msg, strlen(msg),MAX_DELAY);
 8000552:	6978      	ldr	r0, [r7, #20]
 8000554:	f000 fee2 	bl	800131c <strlen>
 8000558:	4602      	mov	r2, r0
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800055e:	6979      	ldr	r1, [r7, #20]
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <main+0xe4>)
 8000562:	f000 fbcf 	bl	8000d04 <USART::Print(char const*, unsigned long, unsigned long)>
    }
    

    while(1);
 8000566:	e7fe      	b.n	8000566 <main+0xde>
 8000568:	40020800 	.word	0x40020800
 800056c:	20000024 	.word	0x20000024
 8000570:	08001494 	.word	0x08001494
 8000574:	080014ac 	.word	0x080014ac

08000578 <SetVTOR(unsigned long)>:

void constexpr SetVTOR(const uint32_t offset);
void inline SetStackPointer(const uint32_t address);

void constexpr SetVTOR(const uint32_t offset)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    *(uint32_t*)VTOR_ADDRESS = offset; 
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <SetVTOR(unsigned long)+0x18>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	e000ed08 	.word	0xe000ed08

08000594 <SetStackPointer(unsigned long)>:

void inline SetStackPointer(const uint32_t address)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    asm volatile("mov sp, %0" : : "r"(address));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	469d      	mov	sp, r3
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)>:
    GPIO_pin_t pin;


/* Methods area */
public:
    GPIO(GPIO_registers_t *GPIO_Address, GPIO_pin_t pin)
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	4613      	mov	r3, r2
 80005b6:	71fb      	strb	r3, [r7, #7]
        :registers(GPIO_Address), pin(pin){}
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	731a      	strb	r2, [r3, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <SetGlobalTimer()>:
inline void SetGlobalTimer(void);
inline Button_State_t GetUserButtonState(const GPIO& button);
inline void JumpToUserApp(void);

void SetGlobalTimer(void)
{           
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    SysTick::SetReloadValue(1000000);
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <SetGlobalTimer()+0x1c>)
 80005d6:	f000 f9db 	bl	8000990 <SysTick::SetReloadValue(unsigned long)>
    SysTick::EnableInt();
 80005da:	f000 fa05 	bl	80009e8 <SysTick::EnableInt()>
    SysTick::SetTickSrc(SYSTICK_ClockSrc::PROC_CLOCK);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 f9e6 	bl	80009b0 <SysTick::SetTickSrc(SYSTICK_ClockSrc)>
    SysTick::Enable();
 80005e4:	f000 f9b8 	bl	8000958 <SysTick::Enable()>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	000f4240 	.word	0x000f4240

080005f0 <GetUserButtonState(GPIO const&)>:

Button_State_t GetUserButtonState(const GPIO &button)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    return (button.GPIO_ReadPin() == PIN_LOW) ? BUTTON_PRESSED : BUTTON_RELEASED; 
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff feff 	bl	80003fc <GPIO::GPIO_ReadPin() const>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf0c      	ite	eq
 8000604:	2301      	moveq	r3, #1
 8000606:	2300      	movne	r3, #0
 8000608:	b2db      	uxtb	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <JumpToUserApp()>:

inline void JumpToUserApp(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
    /* Set location of Vector Table for user app */
    SetVTOR(USER_APP_VT_ADDRESS - BOOTLOADER_VT_ADDRESS);
 800061a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800061e:	f7ff ffab 	bl	8000578 <SetVTOR(unsigned long)>

    /* Set new location for Main Stack Pointer */
    uint32_t user_sp = *((uint32_t *)USER_APP_VT_ADDRESS); // First 4 bytes from the Vector Table represent the Stack Pointer
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <JumpToUserApp()+0x2c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	607b      	str	r3, [r7, #4]
    SetStackPointer(user_sp);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ffb3 	bl	8000594 <SetStackPointer(unsigned long)>

    /* Jump to the reset handler of the user app */
    void (*fp_handler)(void) = (void (*)(void))USER_APP_RESET_HANDLER_ADDRESS; 
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <JumpToUserApp()+0x30>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	603b      	str	r3, [r7, #0]
    fp_handler();
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	4798      	blx	r3
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	08008000 	.word	0x08008000
 8000644:	08008004 	.word	0x08008004

08000648 <NVIC::NVIC_EnableInterrupt(unsigned char)>:
                                                (uint32_t *)NVIC_STIR_ADDRESS
                                            };


void NVIC::NVIC_EnableInterrupt(uint8_t IRn)
{
 8000648:	b490      	push	{r4, r7}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ISER[IRn/32u] |= (1u << (IRn % 32u));
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <NVIC::NVIC_EnableInterrupt(unsigned char)+0x3c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	0952      	lsrs	r2, r2, #5
 800065a:	b2d4      	uxtb	r4, r2
 800065c:	4622      	mov	r2, r4
 800065e:	0092      	lsls	r2, r2, #2
 8000660:	441a      	add	r2, r3
 8000662:	6811      	ldr	r1, [r2, #0]
 8000664:	79fa      	ldrb	r2, [r7, #7]
 8000666:	f002 021f 	and.w	r2, r2, #31
 800066a:	2001      	movs	r0, #1
 800066c:	fa00 f202 	lsl.w	r2, r0, r2
 8000670:	4620      	mov	r0, r4
 8000672:	0080      	lsls	r0, r0, #2
 8000674:	4403      	add	r3, r0
 8000676:	430a      	orrs	r2, r1
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bc90      	pop	{r4, r7}
 8000682:	4770      	bx	lr
 8000684:	20000000 	.word	0x20000000

08000688 <NVIC::NVIC_DisableInterrupt(unsigned char)>:

void NVIC::NVIC_DisableInterrupt(uint8_t IRn)
{
 8000688:	b490      	push	{r4, r7}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ICER[IRn/32u] |= (1 << (IRn % 32u));
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <NVIC::NVIC_DisableInterrupt(unsigned char)+0x40>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	0952      	lsrs	r2, r2, #5
 800069a:	b2d4      	uxtb	r4, r2
 800069c:	4622      	mov	r2, r4
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	441a      	add	r2, r3
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	79f9      	ldrb	r1, [r7, #7]
 80006a6:	f001 011f 	and.w	r1, r1, #31
 80006aa:	2001      	movs	r0, #1
 80006ac:	fa00 f101 	lsl.w	r1, r0, r1
 80006b0:	4608      	mov	r0, r1
 80006b2:	4621      	mov	r1, r4
 80006b4:	0089      	lsls	r1, r1, #2
 80006b6:	440b      	add	r3, r1
 80006b8:	4302      	orrs	r2, r0
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc90      	pop	{r4, r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <NVIC::NVIC_SetInterruptPending(unsigned char)>:

void NVIC::NVIC_SetInterruptPending(uint8_t IRn)
{
 80006cc:	b490      	push	{r4, r7}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ISPR[IRn/32u] |= (1 << (IRn % 32u));
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <NVIC::NVIC_SetInterruptPending(unsigned char)+0x40>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	0952      	lsrs	r2, r2, #5
 80006de:	b2d4      	uxtb	r4, r2
 80006e0:	4622      	mov	r2, r4
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	441a      	add	r2, r3
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	79f9      	ldrb	r1, [r7, #7]
 80006ea:	f001 011f 	and.w	r1, r1, #31
 80006ee:	2001      	movs	r0, #1
 80006f0:	fa00 f101 	lsl.w	r1, r0, r1
 80006f4:	4608      	mov	r0, r1
 80006f6:	4621      	mov	r1, r4
 80006f8:	0089      	lsls	r1, r1, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	4302      	orrs	r2, r0
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bc90      	pop	{r4, r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000000 	.word	0x20000000

08000710 <NVIC::NVIC_ClearInterruptPending(unsigned char)>:

void NVIC::NVIC_ClearInterruptPending(uint8_t IRn)
{
 8000710:	b490      	push	{r4, r7}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ICPR[IRn/32u] |= (1 << (IRn % 32u));
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <NVIC::NVIC_ClearInterruptPending(unsigned char)+0x40>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	0952      	lsrs	r2, r2, #5
 8000722:	b2d4      	uxtb	r4, r2
 8000724:	4622      	mov	r2, r4
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	441a      	add	r2, r3
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	79f9      	ldrb	r1, [r7, #7]
 800072e:	f001 011f 	and.w	r1, r1, #31
 8000732:	2001      	movs	r0, #1
 8000734:	fa00 f101 	lsl.w	r1, r0, r1
 8000738:	4608      	mov	r0, r1
 800073a:	4621      	mov	r1, r4
 800073c:	0089      	lsls	r1, r1, #2
 800073e:	440b      	add	r3, r1
 8000740:	4302      	orrs	r2, r0
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bc90      	pop	{r4, r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <NVIC::NVIC_GetInterruptPendingStatus(unsigned char)>:

bool NVIC::NVIC_GetInterruptPendingStatus(uint8_t IRn)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
    return registers.NVIC_ISPR[IRn/32u] & (1 << (IRn % 32u));
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <NVIC::NVIC_GetInterruptPendingStatus(unsigned char)+0x3c>)
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	095b      	lsrs	r3, r3, #5
 8000766:	b2db      	uxtb	r3, r3
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	f002 021f 	and.w	r2, r2, #31
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	4013      	ands	r3, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2300      	moveq	r3, #0
 8000784:	b2db      	uxtb	r3, r3
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000000 	.word	0x20000000

08000794 <NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)>:

void NVIC::NVIC_SetInterruptPriority(uint8_t IRn, uint8_t priority)
{
 8000794:	b490      	push	{r4, r7}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	460a      	mov	r2, r1
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71bb      	strb	r3, [r7, #6]
    registers.NVIC_IPR[IRn/4u] |= (priority << (IRn % 4u));
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)+0x44>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	0892      	lsrs	r2, r2, #2
 80007ac:	b2d4      	uxtb	r4, r2
 80007ae:	4622      	mov	r2, r4
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	441a      	add	r2, r3
 80007b4:	6812      	ldr	r2, [r2, #0]
 80007b6:	79b8      	ldrb	r0, [r7, #6]
 80007b8:	79f9      	ldrb	r1, [r7, #7]
 80007ba:	f001 0103 	and.w	r1, r1, #3
 80007be:	fa00 f101 	lsl.w	r1, r0, r1
 80007c2:	4608      	mov	r0, r1
 80007c4:	4621      	mov	r1, r4
 80007c6:	0089      	lsls	r1, r1, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	4302      	orrs	r2, r0
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc90      	pop	{r4, r7}
 80007d6:	4770      	bx	lr
 80007d8:	20000000 	.word	0x20000000

080007dc <NVIC::NVIC_GetInterruptPriority(unsigned char)>:

uint8_t NVIC::NVIC_GetInterruptPriority(uint8_t IRn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
    return registers.NVIC_IPR[IRn/4u] & (1 << (IRn % 4u));
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <NVIC::NVIC_GetInterruptPriority(unsigned char)+0x38>)
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 0303 	and.w	r3, r3, #3
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4013      	ands	r3, r2
 8000808:	b2db      	uxtb	r3, r3
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000000 	.word	0x20000000

08000818 <EnableAllInterrupts()>:

void EnableAllInterrupts() {
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
    asm volatile("cpsie i");  // Enable interrupts globally
 800081c:	b662      	cpsie	i
    asm volatile("dsb");      // Data Synchronization Barrier
 800081e:	f3bf 8f4f 	dsb	sy
    asm volatile("isb");      // Instruction Synchronization Barrier
 8000822:	f3bf 8f6f 	isb	sy
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <DisableAllInterrupts()>:

void DisableAllInterrupts() {
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
    asm volatile("cpsid i");  // Disable interrupts globally
 8000832:	b672      	cpsid	i
    asm volatile("dsb");      // Data Synchronization Barrier
 8000834:	f3bf 8f4f 	dsb	sy
    asm volatile("isb");      // Instruction Synchronization Barrier
 8000838:	f3bf 8f6f 	isb	sy
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <SetBasePriority(unsigned long)>:

void SetBasePriority(uint32_t priority) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    asm volatile("msr basepri, %0" : : "r"(priority));  // Set BASEPRI
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f383 8811 	msr	BASEPRI, r3
    asm volatile("dsb");      // Data Synchronization Barrier
 8000852:	f3bf 8f4f 	dsb	sy
    asm volatile("isb");      // Instruction Synchronization Barrier
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <init_ram()>:
    (uint32_t)SPI4_Interrupt
};


void init_ram(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
    uint32_t bss_size, data_size;
    uint32_t i, j;
    uint8_t *pDest, *pSrc;

   
   bss_size = (uint8_t *)&_bss_end - (uint8_t *)&_bss_start;
 800086a:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <init_ram()+0x70>)
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <init_ram()+0x74>)
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	60fb      	str	r3, [r7, #12]
   data_size = (uint8_t *)&_data_end - (uint8_t *)&_data_start;
 8000872:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <init_ram()+0x78>)
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <init_ram()+0x7c>)
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	60bb      	str	r3, [r7, #8]
   

    pDest = (uint8_t*)&_bss_start;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <init_ram()+0x74>)
 800087c:	607b      	str	r3, [r7, #4]
    for(j = 0; j < bss_size; j++)
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	429a      	cmp	r2, r3
 8000888:	d208      	bcs.n	800089c <init_ram()+0x38>
    {
        pDest[j] = 0;
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	4413      	add	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < bss_size; j++)
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	3301      	adds	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	e7f2      	b.n	8000882 <init_ram()+0x1e>
    }

    pDest = (uint8_t*)&_data_start;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <init_ram()+0x7c>)
 800089e:	607b      	str	r3, [r7, #4]
    pSrc = (uint8_t*)&_text_end;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <init_ram()+0x80>)
 80008a2:	603b      	str	r3, [r7, #0]
    for(i = 0; i < data_size; i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d20b      	bcs.n	80008c8 <init_ram()+0x64>
    {
        pDest[i] = pSrc[i];
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	441a      	add	r2, r3
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	440b      	add	r3, r1
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < data_size; i++)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e7ef      	b.n	80008a8 <init_ram()+0x44>
    }
}
 80008c8:	bf00      	nop
 80008ca:	371c      	adds	r7, #28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000378 	.word	0x20000378
 80008d8:	2000001c 	.word	0x2000001c
 80008dc:	2000001c 	.word	0x2000001c
 80008e0:	20000000 	.word	0x20000000
 80008e4:	0800132c 	.word	0x0800132c

080008e8 <call_ctors()>:

void call_ctors(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
    uint32_t count = _init_array_end - _init_array_start;
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <call_ctors()+0x38>)
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <call_ctors()+0x3c>)
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	109b      	asrs	r3, r3, #2
 80008f6:	603b      	str	r3, [r7, #0]
    
    for(uint32_t i = 0; i < count; i++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d208      	bcs.n	8000916 <call_ctors()+0x2e>
        _init_array_start[i] ();
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <call_ctors()+0x3c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090c:	4798      	blx	r3
    for(uint32_t i = 0; i < count; i++)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3301      	adds	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	e7f2      	b.n	80008fc <call_ctors()+0x14>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	080016b0 	.word	0x080016b0
 8000924:	080016ac 	.word	0x080016ac

08000928 <Reset_Handler()>:

void Reset_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    init_ram();
 800092c:	f7ff ff9a 	bl	8000864 <init_ram()>

    call_ctors();
 8000930:	f7ff ffda 	bl	80008e8 <call_ctors()>

    main();
 8000934:	f7ff fda8 	bl	8000488 <main>
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <Systick_Interrupt()>:

volatile SYSTICK_registers_t * const SysTick::registers = (SYSTICK_registers_t *)SYST_CSR_ADRESS;
volatile uint32_t SysTick::globalTime;

void Systick_Interrupt()
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
    SysTick::globalTime++;
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <Systick_Interrupt()+0x18>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a03      	ldr	r2, [pc, #12]	; (8000954 <Systick_Interrupt()+0x18>)
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000020 	.word	0x20000020

08000958 <SysTick::Enable()>:

void SysTick::Enable(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
    SysTick::registers->SYST_CSR |= (1 << SYSTICK_CSR_BitPos::ENABLE);
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick::Enable()+0x18>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <SysTick::Enable()+0x18>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000e010 	.word	0xe000e010

08000974 <SysTick::Disable()>:

void SysTick::Disable(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
    SysTick::registers->SYST_CSR &= ~(1 << SYSTICK_CSR_BitPos::ENABLE);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick::Disable()+0x18>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <SysTick::Disable()+0x18>)
 800097e:	f023 0301 	bic.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e010 	.word	0xe000e010

08000990 <SysTick::SetReloadValue(unsigned long)>:

void SysTick::SetReloadValue(uint32_t microSec)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    SysTick::registers->SYST_RVR = MCU_CLOCK_SPEED_HZ/1000000 * microSec - 1;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <SysTick::SetReloadValue(unsigned long)+0x1c>)
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <SysTick::SetTickSrc(SYSTICK_ClockSrc)>:

void SysTick::SetTickSrc(SYSTICK_ClockSrc src)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
    if(src != EXT_CLOCK)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d006      	beq.n	80009ce <SysTick::SetTickSrc(SYSTICK_ClockSrc)+0x1e>
        SysTick::registers->SYST_CSR |= (1 << SYSTICK_CSR_BitPos::CLKSOURCE);
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SysTick::SetTickSrc(SYSTICK_ClockSrc)+0x34>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SysTick::SetTickSrc(SYSTICK_ClockSrc)+0x34>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	6013      	str	r3, [r2, #0]
    else
        SysTick::registers->SYST_CSR &= ~(1 << SYSTICK_CSR_BitPos::CLKSOURCE);
}
 80009cc:	e005      	b.n	80009da <SysTick::SetTickSrc(SYSTICK_ClockSrc)+0x2a>
        SysTick::registers->SYST_CSR &= ~(1 << SYSTICK_CSR_BitPos::CLKSOURCE);
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SysTick::SetTickSrc(SYSTICK_ClockSrc)+0x34>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <SysTick::SetTickSrc(SYSTICK_ClockSrc)+0x34>)
 80009d4:	f023 0304 	bic.w	r3, r3, #4
 80009d8:	6013      	str	r3, [r2, #0]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <SysTick::EnableInt()>:
    
void SysTick::EnableInt(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
    SysTick::registers->SYST_CSR |= (1 << SYSTICK_CSR_BitPos::TICKINT);
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SysTick::EnableInt()+0x18>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <SysTick::EnableInt()+0x18>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <SysTick::DisableInt()>:

void SysTick::DisableInt(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
    SysTick::registers->SYST_CSR &= ~(1 << SYSTICK_CSR_BitPos::TICKINT);
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick::DisableInt()+0x18>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <SysTick::DisableInt()+0x18>)
 8000a0e:	f023 0302 	bic.w	r3, r3, #2
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <SysTick::GetGlobalTime()>:

uint32_t SysTick::GetGlobalTime(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
    return SysTick::globalTime;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <SysTick::GetGlobalTime()+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000020 	.word	0x20000020

08000a34 <USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t, bool, void (*)())>:


OperationStatus_t USART::Config(const USART_word_length_t word_length, const USART_parity_t parity,
                                const uint32_t baud_rate, const USART_num_stop_bits_t no_stop_bits,
                                bool callbackSwitch, pCallbackFunc_t RxIntCallbackFunc)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	72fb      	strb	r3, [r7, #11]
 8000a42:	4613      	mov	r3, r2
 8000a44:	72bb      	strb	r3, [r7, #10]
    OperationStatus_t retVal = ST_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	75fb      	strb	r3, [r7, #23]

    if(this->currentState == USART_AVAILABLE)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	7a9b      	ldrb	r3, [r3, #10]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d114      	bne.n	8000a7c <USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t, bool, void (*)())+0x48>
    {
        // 1. Word length configuration
        this->word_length = word_length;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	7afa      	ldrb	r2, [r7, #11]
 8000a56:	701a      	strb	r2, [r3, #0]

        // 2. Parity configuration
        this->parity = parity;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	7aba      	ldrb	r2, [r7, #10]
 8000a5c:	721a      	strb	r2, [r3, #8]

        // 3. Configure number of stop bits
        this->no_stop_bits = no_stop_bits;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a64:	705a      	strb	r2, [r3, #1]

        // 4. Configure baud rate
        this->baud_rate = baud_rate;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	605a      	str	r2, [r3, #4]

        // 5. Configure callback function for RX interrupt
        this->callbackSwitch = callbackSwitch;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a72:	72da      	strb	r2, [r3, #11]
        this->pRxCallbackFunc = RxIntCallbackFunc;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	e001      	b.n	8000a80 <USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t, bool, void (*)())+0x4c>
    }
    else
    {
        retVal = ST_BUSY;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	75fb      	strb	r3, [r7, #23]
    }

    return retVal;
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	371c      	adds	r7, #28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <USART::ConfigBaudRate(unsigned long)>:

OperationStatus_t USART::ConfigBaudRate(const uint32_t baud_rate)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
    OperationStatus_t retVal = ST_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
    uint8_t index = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73bb      	strb	r3, [r7, #14]
    uint16_t BaudrateLookUpTable_length = sizeof(BaudrateLookUpTable)/sizeof(USART_baudrate_comp_t);
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	81bb      	strh	r3, [r7, #12]

    if(   ((Clock::registers->CFGR) & (0b100 << RCC_CFGR_BitPos::PPRE1) ) 
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <USART::ConfigBaudRate(unsigned long)+0x108>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
        ||((Clock::registers->CFGR) & (0b1000 << RCC_CFGR_BitPos::HPRE) ) 
        ||(this->registers->CR1    & (1 << USART_CR1_BitPos::OVER8) ) 
        ||(this->currentState == USART_BUSY) )
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d111      	bne.n	8000ad4 <USART::ConfigBaudRate(unsigned long)+0x48>
        ||((Clock::registers->CFGR) & (0b1000 << RCC_CFGR_BitPos::HPRE) ) 
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <USART::ConfigBaudRate(unsigned long)+0x108>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10a      	bne.n	8000ad4 <USART::ConfigBaudRate(unsigned long)+0x48>
        ||(this->registers->CR1    & (1 << USART_CR1_BitPos::OVER8) ) 
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <USART::ConfigBaudRate(unsigned long)+0x48>
        ||(this->currentState == USART_BUSY) )
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7a9b      	ldrb	r3, [r3, #10]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <USART::ConfigBaudRate(unsigned long)+0x4c>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e000      	b.n	8000ada <USART::ConfigBaudRate(unsigned long)+0x4e>
 8000ad8:	2300      	movs	r3, #0
    if(   ((Clock::registers->CFGR) & (0b100 << RCC_CFGR_BitPos::PPRE1) ) 
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <USART::ConfigBaudRate(unsigned long)+0x58>
    {
        /* To be implemented, a function that computes the oversampling and division values dynamically */
        retVal = ST_NOK;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e050      	b.n	8000b86 <USART::ConfigBaudRate(unsigned long)+0xfa>
    }
    else
    {
        this->registers->BRR = 0x00;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
        while( (BaudrateLookUpTable[index].baud_rate != baud_rate) && (++index < BaudrateLookUpTable_length) );
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	4a2a      	ldr	r2, [pc, #168]	; (8000b98 <USART::ConfigBaudRate(unsigned long)+0x10c>)
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	4413      	add	r3, r2
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d008      	beq.n	8000b0e <USART::ConfigBaudRate(unsigned long)+0x82>
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	3301      	adds	r3, #1
 8000b00:	73bb      	strb	r3, [r7, #14]
 8000b02:	7bba      	ldrb	r2, [r7, #14]
 8000b04:	89bb      	ldrh	r3, [r7, #12]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	da01      	bge.n	8000b0e <USART::ConfigBaudRate(unsigned long)+0x82>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <USART::ConfigBaudRate(unsigned long)+0x84>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d000      	beq.n	8000b16 <USART::ConfigBaudRate(unsigned long)+0x8a>
 8000b14:	e7ea      	b.n	8000aec <USART::ConfigBaudRate(unsigned long)+0x60>
        if(index == BaudrateLookUpTable_length)
 8000b16:	7bba      	ldrb	r2, [r7, #14]
 8000b18:	89bb      	ldrh	r3, [r7, #12]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d113      	bne.n	8000b46 <USART::ConfigBaudRate(unsigned long)+0xba>
        {
            // This is the default case, the requested baud rate is not supported
            this->registers->BRR |= (BaudrateLookUpTable[2].fraction << USART_BRR_BitPos::FRACTION);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	2303      	movs	r3, #3
 8000b26:	4619      	mov	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	609a      	str	r2, [r3, #8]
            this->registers->BRR |= (BaudrateLookUpTable[2].mantissa << USART_BRR_BitPos::MANTISSA);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	2368      	movs	r3, #104	; 0x68
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	e01f      	b.n	8000b86 <USART::ConfigBaudRate(unsigned long)+0xfa>
        }
        else
        {
            this->registers->BRR |= (BaudrateLookUpTable[index].fraction << USART_BRR_BitPos::FRACTION);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	4912      	ldr	r1, [pc, #72]	; (8000b98 <USART::ConfigBaudRate(unsigned long)+0x10c>)
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	785b      	ldrb	r3, [r3, #1]
 8000b56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	609a      	str	r2, [r3, #8]
            this->registers->BRR |= (BaudrateLookUpTable[index].mantissa << USART_BRR_BitPos::MANTISSA);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	490a      	ldr	r1, [pc, #40]	; (8000b98 <USART::ConfigBaudRate(unsigned long)+0x10c>)
 8000b70:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8000b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	430a      	orrs	r2, r1
 8000b84:	609a      	str	r2, [r3, #8]
        }
    }

    return retVal;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	080013a0 	.word	0x080013a0
 8000b98:	080015cc 	.word	0x080015cc

08000b9c <USART::Init()>:


OperationStatus_t USART::Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	6078      	str	r0, [r7, #4]
    OperationStatus_t retVal = ST_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(this->currentState == USART_AVAILABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7a9b      	ldrb	r3, [r3, #10]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	f040 809c 	bne.w	8000cec <USART::Init()+0x150>
    {
        // 1. Enable USART Clock
        Clock::EnableClock_USART2();
 8000bb4:	f7ff faee 	bl	8000194 <Clock::EnableClock_USART2()>

        // 2. Configure GPIO
        GPIO PA2_USART2TX(GPIOA, PIN2);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	4950      	ldr	r1, [pc, #320]	; (8000d00 <USART::Init()+0x164>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fcf2 	bl	80005aa <GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)>
        GPIO PA3_USART2RX(GPIOA, PIN3);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2203      	movs	r2, #3
 8000bcc:	494c      	ldr	r1, [pc, #304]	; (8000d00 <USART::Init()+0x164>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fceb 	bl	80005aa <GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)>
        PA2_USART2TX.Config(ALTERNATE_FUNCTION, OUT_PUSHPULL, MEDIUM_SPEED, NO_PULL_UP_DOWN, AF7);
 8000bd4:	f107 001c 	add.w	r0, r7, #28
 8000bd8:	2307      	movs	r3, #7
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2301      	movs	r3, #1
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	f7ff fb37 	bl	8000258 <GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)>
        PA3_USART2RX.Config(ALTERNATE_FUNCTION, OUT_PUSHPULL, MEDIUM_SPEED, NO_PULL_UP_DOWN, AF7);
 8000bea:	f107 000c 	add.w	r0, r7, #12
 8000bee:	2307      	movs	r3, #7
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	f7ff fb2c 	bl	8000258 <GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)>
        PA2_USART2TX.Init();
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fb48 	bl	800029a <GPIO::Init()>
        PA3_USART2RX.Init();
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fb43 	bl	800029a <GPIO::Init()>

        // 1. Enable USART by writing UE bit in CR1
        this->registers->CR1 |= (1 << USART_CR1_BitPos::UE);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c22:	60da      	str	r2, [r3, #12]

        // 2. Word length configuration
        if(WORD_LENTGTH_9BIT == this->word_length)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d108      	bne.n	8000c3e <USART::Init()+0xa2>
        {
            this->registers->CR1 |= (1 << USART_CR1_BitPos::M);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	e007      	b.n	8000c4e <USART::Init()+0xb2>
        }
        else
        {
            this->registers->CR1 &= ~(1 << USART_CR1_BitPos::M);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c4c:	60da      	str	r2, [r3, #12]
        }

        // 3. Parity configuration
        if(ODD_PARITY == this->parity)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7a1b      	ldrb	r3, [r3, #8]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d110      	bne.n	8000c78 <USART::Init()+0xdc>
        {
            this->registers->CR1 |= (1 << USART_CR1_BitPos::PCE); // enable partity
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c64:	60da      	str	r2, [r3, #12]
            this->registers->CR1 |= (1 << USART_CR1_BitPos::PS);  // select odd parity
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	e01c      	b.n	8000cb2 <USART::Init()+0x116>
        }
        else if(EVEN_PARITY == this->parity)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7a1b      	ldrb	r3, [r3, #8]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d110      	bne.n	8000ca2 <USART::Init()+0x106>
        {
            this->registers->CR1 |= (1 << USART_CR1_BitPos::PCE); // enable partity
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c8e:	60da      	str	r2, [r3, #12]
            this->registers->CR1 &= ~(1 << USART_CR1_BitPos::PS); // select even parity
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	e007      	b.n	8000cb2 <USART::Init()+0x116>
        }
        else
        {
            this->registers->CR1 &= ~(1 << USART_CR1_BitPos::PCE); // no parity
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cb0:	60da      	str	r2, [r3, #12]
        }

        // 4. Configure number of stop bits
        this->registers->CR2 &= ~(0b11 << USART_CR2_BitPos::STOP); // clean bits
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000cc0:	611a      	str	r2, [r3, #16]
        this->registers->CR2 |= (this->no_stop_bits << USART_CR2_BitPos::STOP);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	031b      	lsls	r3, r3, #12
 8000cce:	4619      	mov	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	611a      	str	r2, [r3, #16]

        retVal = this->ConfigBaudRate(this->baud_rate); 
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fed4 	bl	8000a8c <USART::ConfigBaudRate(unsigned long)>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000cea:	e002      	b.n	8000cf2 <USART::Init()+0x156>
    }
    else
    {
        retVal = ST_BUSY;
 8000cec:	2302      	movs	r3, #2
 8000cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return retVal;
 8000cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3730      	adds	r7, #48	; 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40020000 	.word	0x40020000

08000d04 <USART::Print(char const*, unsigned long, unsigned long)>:


OperationStatus_t USART::Print(const char *message, uint32_t size, uint32_t waitTime)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
    this->currentState = USART_BUSY;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	729a      	strb	r2, [r3, #10]
    uint32_t startTime = SysTick::GetGlobalTime();
 8000d18:	f7ff fe82 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000d1c:	6138      	str	r0, [r7, #16]
    uint8_t index = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
    OperationStatus_t retVal = ST_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	75bb      	strb	r3, [r7, #22]

    // 1. Set the TE bit in CR1 to send an Idle Frame as first transmission
    this->registers->CR1 |= (1 << USART_CR1_BitPos::TE);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	f042 0208 	orr.w	r2, r2, #8
 8000d34:	60da      	str	r2, [r3, #12]

    // 2. Write data to DR register, this will clear TXE bit, repeat for each byte of data
    this->registers->DR = message[index++];
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	75fa      	strb	r2, [r7, #23]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	4413      	add	r3, r2
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	605a      	str	r2, [r3, #4]
    while(index < size)
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d93a      	bls.n	8000dc8 <USART::Print(char const*, unsigned long, unsigned long)+0xc4>
    {
        if(DELAY_EXCEEDED(startTime, SysTick::GetGlobalTime(), waitTime)) 
 8000d52:	f7ff fe65 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000d56:	4601      	mov	r1, r0
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d905      	bls.n	8000d6e <USART::Print(char const*, unsigned long, unsigned long)+0x6a>
 8000d62:	f7ff fe5d 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d30e      	bcc.n	8000d8c <USART::Print(char const*, unsigned long, unsigned long)+0x88>
 8000d6e:	f7ff fe57 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000d72:	4602      	mov	r2, r0
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <USART::Print(char const*, unsigned long, unsigned long)+0x8c>
 8000d80:	f7ff fe4e 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d901      	bls.n	8000d90 <USART::Print(char const*, unsigned long, unsigned long)+0x8c>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <USART::Print(char const*, unsigned long, unsigned long)+0x8e>
 8000d90:	2300      	movs	r3, #0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <USART::Print(char const*, unsigned long, unsigned long)+0x96>
        {
            retVal = TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	75bb      	strb	r3, [r7, #22]
        }

        if(this->registers->SR & (1 << USART_SR_BitPos::TXE))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf14      	ite	ne
 8000da8:	2301      	movne	r3, #1
 8000daa:	2300      	moveq	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0cb      	beq.n	8000d4a <USART::Print(char const*, unsigned long, unsigned long)+0x46>
        {
            this->registers->DR = message[index++];
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	75fa      	strb	r2, [r7, #23]
 8000db8:	461a      	mov	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	605a      	str	r2, [r3, #4]
    while(index < size)
 8000dc6:	e7c0      	b.n	8000d4a <USART::Print(char const*, unsigned long, unsigned long)+0x46>
        }
    }


    // 3. After last byte is written to DR wait until TC = 1. This will indicate that the transmission of last byte is complete.
    while(!(this->registers->SR & (1 << USART_SR_BitPos::TC)))
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2301      	moveq	r3, #1
 8000dd8:	2300      	movne	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d024      	beq.n	8000e2a <USART::Print(char const*, unsigned long, unsigned long)+0x126>
    {
        if(DELAY_EXCEEDED(startTime, SysTick::GetGlobalTime(), waitTime))
 8000de0:	f7ff fe1e 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000de4:	4601      	mov	r1, r0
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d905      	bls.n	8000dfc <USART::Print(char const*, unsigned long, unsigned long)+0xf8>
 8000df0:	f7ff fe16 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d30e      	bcc.n	8000e1a <USART::Print(char const*, unsigned long, unsigned long)+0x116>
 8000dfc:	f7ff fe10 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	3b01      	subs	r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d207      	bcs.n	8000e1e <USART::Print(char const*, unsigned long, unsigned long)+0x11a>
 8000e0e:	f7ff fe07 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d901      	bls.n	8000e1e <USART::Print(char const*, unsigned long, unsigned long)+0x11a>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <USART::Print(char const*, unsigned long, unsigned long)+0x11c>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0d1      	beq.n	8000dc8 <USART::Print(char const*, unsigned long, unsigned long)+0xc4>
        {
            retVal = TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	75bb      	strb	r3, [r7, #22]
    while(!(this->registers->SR & (1 << USART_SR_BitPos::TC)))
 8000e28:	e7ce      	b.n	8000dc8 <USART::Print(char const*, unsigned long, unsigned long)+0xc4>
        }   
    }

    this->currentState = USART_AVAILABLE;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	729a      	strb	r2, [r3, #10]

    return retVal;
 8000e30:	7dbb      	ldrb	r3, [r7, #22]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <USART::Read(unsigned char*, unsigned long, unsigned long)>:

OperationStatus_t USART::Read(unsigned char *buffer, uint32_t size, uint32_t waitTime)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	603b      	str	r3, [r7, #0]
    this->currentState = USART_BUSY;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	729a      	strb	r2, [r3, #10]
    uint32_t startTime = SysTick::GetGlobalTime();
 8000e4e:	f7ff fde7 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000e52:	6138      	str	r0, [r7, #16]
    uint8_t index = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	75fb      	strb	r3, [r7, #23]
    OperationStatus_t retVal = ST_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	75bb      	strb	r3, [r7, #22]

    // 1. Set the RE bit to enable the receiver search for a start bit
    this->registers->CR1 |= (1 << USART_CR1_BitPos::RE);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	f042 0204 	orr.w	r2, r2, #4
 8000e6a:	60da      	str	r2, [r3, #12]

    while(index < size)
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d93b      	bls.n	8000eec <USART::Read(unsigned char*, unsigned long, unsigned long)+0xb2>
    {
        if(DELAY_EXCEEDED(startTime, SysTick::GetGlobalTime(), waitTime)) 
 8000e74:	f7ff fdd4 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000e78:	4601      	mov	r1, r0
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d905      	bls.n	8000e90 <USART::Read(unsigned char*, unsigned long, unsigned long)+0x56>
 8000e84:	f7ff fdcc 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d30e      	bcc.n	8000eae <USART::Read(unsigned char*, unsigned long, unsigned long)+0x74>
 8000e90:	f7ff fdc6 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d207      	bcs.n	8000eb2 <USART::Read(unsigned char*, unsigned long, unsigned long)+0x78>
 8000ea2:	f7ff fdbd 	bl	8000a20 <SysTick::GetGlobalTime()>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d901      	bls.n	8000eb2 <USART::Read(unsigned char*, unsigned long, unsigned long)+0x78>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <USART::Read(unsigned char*, unsigned long, unsigned long)+0x7a>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <USART::Read(unsigned char*, unsigned long, unsigned long)+0x82>
        {
            retVal = TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	75bb      	strb	r3, [r7, #22]
        }

        // 2. Wait for a character to be received
        if(this->registers->SR & (1 << USART_SR_BitPos::RXNE))
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0320 	and.w	r3, r3, #32
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0cb      	beq.n	8000e6c <USART::Read(unsigned char*, unsigned long, unsigned long)+0x32>
        {
            buffer[index++] = this->registers->DR;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	1c59      	adds	r1, r3, #1
 8000ede:	75f9      	strb	r1, [r7, #23]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	701a      	strb	r2, [r3, #0]
    while(index < size)
 8000eea:	e7bf      	b.n	8000e6c <USART::Read(unsigned char*, unsigned long, unsigned long)+0x32>
        }
    }

    // 3. The entire message has been received
    this->currentState = USART_AVAILABLE;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	729a      	strb	r2, [r3, #10]

    return retVal;
 8000ef2:	7dbb      	ldrb	r3, [r7, #22]

}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <USART::PrintIT(char const*, unsigned long, unsigned long)>:


OperationStatus_t USART::PrintIT(const char *message, uint32_t size, uint32_t waitTime)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
    this->currentState = USART_BUSY;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	729a      	strb	r2, [r3, #10]
    OperationStatus_t retVal = ST_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]
    PARAM_UNUSED(waitTime);

    if( (USART_TX_BUFFER_SIZE < size) || (0 >= size) )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f1a:	d802      	bhi.n	8000f22 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x26>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x2c>
        retVal = ST_NOK;
 8000f22:	2301      	movs	r3, #1
 8000f24:	75fb      	strb	r3, [r7, #23]
 8000f26:	e03d      	b.n	8000fa4 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xa8>
    else
    {
        if(this->registers == (USART_Registers_t*)USART1_ADDRESS)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	4a34      	ldr	r2, [pc, #208]	; (8001000 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x104>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10e      	bne.n	8000f50 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x54>
        {
            USART::USART1_MessageStr.idxTXBufferUSART = 0;
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x108>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            m_memcpy((uint8_t*)USART::USART1_MessageStr.txBufferUSART, (void*)message, size);
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	4831      	ldr	r0, [pc, #196]	; (8001004 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x108>)
 8000f40:	f000 f9cf 	bl	80012e2 <m_memcpy(void*, void const*, unsigned long)>
            USART::USART1_MessageStr.txLen = size;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x108>)
 8000f4a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8000f4e:	e029      	b.n	8000fa4 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xa8>
        }
        else if(this->registers == (USART_Registers_t*)USART2_ADDRESS)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x10c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10e      	bne.n	8000f78 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x7c>
        {
            USART::USART2_MessageStr.idxTXBufferUSART = 0;
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x110>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            m_memcpy((uint8_t*)USART::USART2_MessageStr.txBufferUSART, message, size);
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	4829      	ldr	r0, [pc, #164]	; (800100c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x110>)
 8000f68:	f000 f9bb 	bl	80012e2 <m_memcpy(void*, void const*, unsigned long)>
            USART::USART2_MessageStr.txLen = size;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x110>)
 8000f72:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8000f76:	e015      	b.n	8000fa4 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xa8>
        }
        else if(this->registers == (USART_Registers_t*)USART6_ADDRESS)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a24      	ldr	r2, [pc, #144]	; (8001010 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x114>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10e      	bne.n	8000fa0 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xa4>
        {
            USART::USART6_MessageStr.idxTXBufferUSART = 0;
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x118>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            m_memcpy((uint8_t*)USART::USART6_MessageStr.txBufferUSART, message, size);
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	4821      	ldr	r0, [pc, #132]	; (8001014 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x118>)
 8000f90:	f000 f9a7 	bl	80012e2 <m_memcpy(void*, void const*, unsigned long)>
            USART::USART6_MessageStr.txLen = size;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x118>)
 8000f9a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8000f9e:	e001      	b.n	8000fa4 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xa8>
        }
        else
        {
            retVal = ST_NOK;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	75fb      	strb	r3, [r7, #23]
        }

    }

    while (!(this->registers->SR & (1 << USART_SR_BitPos::TXE)));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <USART::PrintIT(char const*, unsigned long, unsigned long)+0xc2>
 8000fbc:	e7f2      	b.n	8000fa4 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xa8>
    // Wait for USART to be ready for transmission (TXE flag)
    
    this->registers->DR = USART::USART2_MessageStr.txBufferUSART[USART::USART2_MessageStr.idxTXBufferUSART++];
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x110>)
 8000fc0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	b2d1      	uxtb	r1, r2
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x110>)
 8000fcc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x110>)
 8000fd4:	5c9b      	ldrb	r3, [r3, r2]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	605a      	str	r2, [r3, #4]

    // Activate the NVIC interrupt for USART
    NVIC::NVIC_EnableInterrupt(USART2_INT_POS);
 8000fde:	2026      	movs	r0, #38	; 0x26
 8000fe0:	f7ff fb32 	bl	8000648 <NVIC::NVIC_EnableInterrupt(unsigned char)>

    this->registers->CR1 |= (1 << USART_CR1_BitPos::TXEIE) | // Activate transmit register empty interrupt
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 8000ff2:	60da      	str	r2, [r3, #12]
                            (1 << USART_CR1_BitPos::TCIE)  | // Activate transmision complete interrupt

                            (1 << USART_CR1_BitPos::TE);     // Set the TE bit in CR1 to send an Idle Frame as first transmission

    return retVal;
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40011000 	.word	0x40011000
 8001004:	20000060 	.word	0x20000060
 8001008:	40004400 	.word	0x40004400
 800100c:	20000168 	.word	0x20000168
 8001010:	40011400 	.word	0x40011400
 8001014:	20000270 	.word	0x20000270

08001018 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)>:

OperationStatus_t USART::ReadIT(uint8_t *buffer, uint32_t size, uint32_t waitTime)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
    OperationStatus_t retVal = ST_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]
    PARAM_UNUSED(waitTime);
    this->currentState = USART_BUSY;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	729a      	strb	r2, [r3, #10]

    if( (USART_RX_BUFFER_SIZE < size) && (0 >= size) && (buffer != nullptr))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001036:	d908      	bls.n	800104a <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0x32>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0x32>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0x32>
        retVal = ST_NOK;
 8001044:	2301      	movs	r3, #1
 8001046:	75fb      	strb	r3, [r7, #23]
 8001048:	e037      	b.n	80010ba <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xa2>
    else
    {
        if( this->registers == (USART_Registers_t*)USART1_ADDRESS )
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xd4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d10d      	bne.n	8001070 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0x58>
        {
            USART::USART1_MessageStr.rxLen = size;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xd8>)
 800105a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            USART::USART1_MessageStr.idxRXBufferUSART = 0;
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            USART::USART1_MessageStr.rxBufferUSART = buffer;
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xd8>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 800106e:	e024      	b.n	80010ba <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xa2>
        }
        else if( this->registers == (USART_Registers_t*)USART2_ADDRESS )
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xdc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10d      	bne.n	8001096 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0x7e>
        {
            USART::USART2_MessageStr.rxLen = size;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xe0>)
 8001080:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            USART::USART2_MessageStr.idxRXBufferUSART = 0;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xe0>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            USART::USART2_MessageStr.rxBufferUSART = buffer;
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xe0>)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8001094:	e011      	b.n	80010ba <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xa2>
        }
        else if( this->registers == (USART_Registers_t*)USART6_ADDRESS )
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xe4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d10c      	bne.n	80010ba <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xa2>
        {
            USART::USART6_MessageStr.rxLen = size;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xe8>)
 80010a6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            USART::USART6_MessageStr.idxRXBufferUSART = 0;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            USART::USART6_MessageStr.rxBufferUSART = buffer;
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <USART::ReadIT(unsigned char*, unsigned long, unsigned long)+0xe8>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
        }
    }

    // 1. Activate the NVIC interrupt for USART
    NVIC::NVIC_EnableInterrupt(USART2_INT_POS);
 80010ba:	2026      	movs	r0, #38	; 0x26
 80010bc:	f7ff fac4 	bl	8000648 <NVIC::NVIC_EnableInterrupt(unsigned char)>

    // 2. Enable read data register not empty interrupt RXNEIE
    this->registers->CR1 |= (1 << USART_CR1_BitPos::RXNEIE);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	f042 0220 	orr.w	r2, r2, #32
 80010ce:	60da      	str	r2, [r3, #12]

    // 3. Set the RE bit to enable the receiver search for a start bit
    this->registers->CR1 |= (1 << USART_CR1_BitPos::RE);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	f042 0204 	orr.w	r2, r2, #4
 80010de:	60da      	str	r2, [r3, #12]

    return retVal;
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40011000 	.word	0x40011000
 80010f0:	20000060 	.word	0x20000060
 80010f4:	40004400 	.word	0x40004400
 80010f8:	20000168 	.word	0x20000168
 80010fc:	40011400 	.word	0x40011400
 8001100:	20000270 	.word	0x20000270

08001104 <USART2_Interrupt()>:

// There are multiple interrupts multiplexed, make sure to check which interrupt was triggered
void USART2_Interrupt(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    /* Check which interrupt event triggered the interrupt */
    /* 1. Interrupt was triggered by a sent byte */
    if ( (((USART_Registers_t*)USART2_ADDRESS)->SR & (1 << USART_SR_BitPos::TXE)) && (((USART_Registers_t*)USART2_ADDRESS)->CR1 & (1 << USART_CR1_BitPos::TXEIE)) )
 8001108:	4b46      	ldr	r3, [pc, #280]	; (8001224 <USART2_Interrupt()+0x120>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001110:	2b00      	cmp	r3, #0
 8001112:	d031      	beq.n	8001178 <USART2_Interrupt()+0x74>
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <USART2_Interrupt()+0x120>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111c:	2b00      	cmp	r3, #0
 800111e:	d02b      	beq.n	8001178 <USART2_Interrupt()+0x74>
    {
        if(USART::USART2_MessageStr.idxTXBufferUSART < USART::USART2_MessageStr.txLen)
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <USART2_Interrupt()+0x124>)
 8001122:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <USART2_Interrupt()+0x124>)
 800112a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800112e:	b2db      	uxtb	r3, r3
 8001130:	429a      	cmp	r2, r3
 8001132:	bf34      	ite	cc
 8001134:	2301      	movcc	r3, #1
 8001136:	2300      	movcs	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00f      	beq.n	800115e <USART2_Interrupt()+0x5a>
        {
            ((USART_Registers_t*)USART2_ADDRESS)->DR = USART::USART2_MessageStr.txBufferUSART[USART::USART2_MessageStr.idxTXBufferUSART++];
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <USART2_Interrupt()+0x124>)
 8001140:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001144:	b2db      	uxtb	r3, r3
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	b2d1      	uxtb	r1, r2
 800114a:	4a37      	ldr	r2, [pc, #220]	; (8001228 <USART2_Interrupt()+0x124>)
 800114c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 8001150:	461a      	mov	r2, r3
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <USART2_Interrupt()+0x124>)
 8001154:	5c9b      	ldrb	r3, [r3, r2]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b32      	ldr	r3, [pc, #200]	; (8001224 <USART2_Interrupt()+0x120>)
 800115a:	605a      	str	r2, [r3, #4]
        if(USART::USART2_MessageStr.idxTXBufferUSART < USART::USART2_MessageStr.txLen)
 800115c:	e060      	b.n	8001220 <USART2_Interrupt()+0x11c>
        }
        else
        {
            /* The entire message has been sent, deactivate further interrupts triggered by TXE */
            ((USART_Registers_t*)USART2_ADDRESS)->CR1 &= ~(1 << USART_CR1_BitPos::TXEIE);
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <USART2_Interrupt()+0x120>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <USART2_Interrupt()+0x120>)
 8001164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001168:	60d3      	str	r3, [r2, #12]
            /* Deactivate the NVIC interrupt for USART */
            NVIC::NVIC_DisableInterrupt(USART2_INT_POS);
 800116a:	2026      	movs	r0, #38	; 0x26
 800116c:	f7ff fa8c 	bl	8000688 <NVIC::NVIC_DisableInterrupt(unsigned char)>

            USART2.currentState = USART_AVAILABLE;
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <USART2_Interrupt()+0x128>)
 8001172:	2201      	movs	r2, #1
 8001174:	729a      	strb	r2, [r3, #10]
        if(USART::USART2_MessageStr.idxTXBufferUSART < USART::USART2_MessageStr.txLen)
 8001176:	e053      	b.n	8001220 <USART2_Interrupt()+0x11c>
        }

    }

    /* 2. Interrupt was triggered by a received byte*/
    else if( (((USART_Registers_t*)USART2_ADDRESS)->SR & (1 << USART_SR_BitPos::RXNE)) && (((USART_Registers_t*)USART2_ADDRESS)->CR1 & (1 << USART_CR1_BitPos::RXNEIE)) )
 8001178:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <USART2_Interrupt()+0x120>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b00      	cmp	r3, #0
 8001182:	d04d      	beq.n	8001220 <USART2_Interrupt()+0x11c>
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <USART2_Interrupt()+0x120>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	2b00      	cmp	r3, #0
 800118e:	d047      	beq.n	8001220 <USART2_Interrupt()+0x11c>
    {
        if(++USART::USART2_MessageStr.idxRXBufferUSART < USART::USART2_MessageStr.rxLen)
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <USART2_Interrupt()+0x124>)
 8001192:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3301      	adds	r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <USART2_Interrupt()+0x124>)
 800119e:	4619      	mov	r1, r3
 80011a0:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
 80011a4:	4a20      	ldr	r2, [pc, #128]	; (8001228 <USART2_Interrupt()+0x124>)
 80011a6:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	4293      	cmp	r3, r2
 80011ae:	bf34      	ite	cc
 80011b0:	2301      	movcc	r3, #1
 80011b2:	2300      	movcs	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00d      	beq.n	80011d6 <USART2_Interrupt()+0xd2>
            USART::USART2_MessageStr.rxBufferUSART[USART::USART2_MessageStr.idxRXBufferUSART-1] = ((USART_Registers_t*)USART2_ADDRESS)->DR;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <USART2_Interrupt()+0x120>)
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <USART2_Interrupt()+0x124>)
 80011c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <USART2_Interrupt()+0x124>)
 80011c6:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	3b01      	subs	r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	b2ca      	uxtb	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
            if( (USART2.callbackSwitch) && (USART2.pRxCallbackFunc != nullptr) )
                USART2.pRxCallbackFunc();
        }
    }
    
}
 80011d4:	e024      	b.n	8001220 <USART2_Interrupt()+0x11c>
            USART::USART2_MessageStr.rxBufferUSART[USART::USART2_MessageStr.idxRXBufferUSART-1] = ((USART_Registers_t*)USART2_ADDRESS)->DR;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <USART2_Interrupt()+0x120>)
 80011d8:	6859      	ldr	r1, [r3, #4]
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <USART2_Interrupt()+0x124>)
 80011dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <USART2_Interrupt()+0x124>)
 80011e2:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
            ((USART_Registers_t*)USART2_ADDRESS)->CR1 &= ~(1 << USART_CR1_BitPos::RXNEIE);
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <USART2_Interrupt()+0x120>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <USART2_Interrupt()+0x120>)
 80011f6:	f023 0320 	bic.w	r3, r3, #32
 80011fa:	60d3      	str	r3, [r2, #12]
            NVIC::NVIC_DisableInterrupt(USART2_INT_POS);
 80011fc:	2026      	movs	r0, #38	; 0x26
 80011fe:	f7ff fa43 	bl	8000688 <NVIC::NVIC_DisableInterrupt(unsigned char)>
            USART2.currentState = USART_AVAILABLE;
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <USART2_Interrupt()+0x128>)
 8001204:	2201      	movs	r2, #1
 8001206:	729a      	strb	r2, [r3, #10]
            if( (USART2.callbackSwitch) && (USART2.pRxCallbackFunc != nullptr) )
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <USART2_Interrupt()+0x128>)
 800120a:	7adb      	ldrb	r3, [r3, #11]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <USART2_Interrupt()+0x11c>
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <USART2_Interrupt()+0x128>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <USART2_Interrupt()+0x11c>
                USART2.pRxCallbackFunc();
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <USART2_Interrupt()+0x128>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4798      	blx	r3
}
 800121e:	e7ff      	b.n	8001220 <USART2_Interrupt()+0x11c>
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40004400 	.word	0x40004400
 8001228:	20000168 	.word	0x20000168
 800122c:	20000024 	.word	0x20000024

08001230 <__static_initialization_and_destruction_0(int, int)>:
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d110      	bne.n	8001262 <__static_initialization_and_destruction_0(int, int)+0x32>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001246:	4293      	cmp	r3, r2
 8001248:	d10b      	bne.n	8001262 <__static_initialization_and_destruction_0(int, int)+0x32>
USART USART2((USART_Registers_t*)USART2_ADDRESS);
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__static_initialization_and_destruction_0(int, int)+0x3c>)
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <__static_initialization_and_destruction_0(int, int)+0x40>)
 800124e:	f000 f821 	bl	8001294 <USART::USART(USART_Registers_t*)>
USART USART1((USART_Registers_t*)USART1_ADDRESS);
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__static_initialization_and_destruction_0(int, int)+0x44>)
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <__static_initialization_and_destruction_0(int, int)+0x48>)
 8001256:	f000 f81d 	bl	8001294 <USART::USART(USART_Registers_t*)>
USART USART6((USART_Registers_t*)USART6_ADDRESS);
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__static_initialization_and_destruction_0(int, int)+0x4c>)
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <__static_initialization_and_destruction_0(int, int)+0x50>)
 800125e:	f000 f819 	bl	8001294 <USART::USART(USART_Registers_t*)>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40004400 	.word	0x40004400
 8001270:	20000024 	.word	0x20000024
 8001274:	40011000 	.word	0x40011000
 8001278:	20000038 	.word	0x20000038
 800127c:	40011400 	.word	0x40011400
 8001280:	2000004c 	.word	0x2000004c

08001284 <_GLOBAL__sub_I_USART2>:
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
 8001288:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff ffcf 	bl	8001230 <__static_initialization_and_destruction_0(int, int)>
 8001292:	bd80      	pop	{r7, pc}

08001294 <USART::USART(USART_Registers_t*)>:
    volatile static USART_MessageStr_t USART2_MessageStr;
    volatile static USART_MessageStr_t USART6_MessageStr;

/* Methods area */
public:
    USART(USART_Registers_t *usart_address)
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
        : word_length(WORD_LENTGTH_8BIT), no_stop_bits(NO_STOPBITS_1), baud_rate(9600u),
        parity(NO_PARITY), operation_mode(FULL_DUPLEX_MODE), currentState(USART_AVAILABLE), 
        callbackSwitch(false), pRxCallbackFunc(nullptr), registers(usart_address){}
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	705a      	strb	r2, [r3, #1]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	721a      	strb	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	725a      	strb	r2, [r3, #9]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	729a      	strb	r2, [r3, #10]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	72da      	strb	r2, [r3, #11]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <m_memcpy(void*, void const*, unsigned long)>:
#include "m_memory.h"

void m_memcpy(void* dest, const void* src, uint32_t count)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b087      	sub	sp, #28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
    for(uint32_t i = 0; i < count; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d20b      	bcs.n	8001312 <m_memcpy(void*, void const*, unsigned long)+0x30>
        ((uint8_t*)dest)[i] = ((uint8_t*)src)[i];
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	441a      	add	r2, r3
 8001300:	68f9      	ldr	r1, [r7, #12]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	440b      	add	r3, r1
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	701a      	strb	r2, [r3, #0]
    for(uint32_t i = 0; i < count; i++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e7ef      	b.n	80012f2 <m_memcpy(void*, void const*, unsigned long)+0x10>
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <strlen>:
 800131c:	2300      	movs	r3, #0
 800131e:	5cc2      	ldrb	r2, [r0, r3]
 8001320:	3301      	adds	r3, #1
 8001322:	2a00      	cmp	r2, #0
 8001324:	d1fb      	bne.n	800131e <strlen+0x2>
 8001326:	1e58      	subs	r0, r3, #1
 8001328:	4770      	bx	lr
	...
