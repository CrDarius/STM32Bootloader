CPPFILES =    ./src/Clock_Driver.cpp ./src/GPIO_Driver.cpp ./src/main.cpp ./src/m_memory.cpp ./src/NVIC_Drivers.cpp ./src/stm32_startup.cpp ./src/SysTick.cpp ./src/UART_Driver.cpp  
OBJECTS = out/Clock_Driver.o out/GPIO_Driver.o out/main.o out/m_memory.o out/NVIC_Drivers.o out/stm32_startup.o out/SysTick.o out/UART_Driver.o
arm-none-eabi-objdump -xS -C arm bin/bootloader.elf

bin/bootloader.elf:     file format elf32-littlearm
bin/bootloader.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080006b9

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00000d4c memsz 0x00000d4c flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08000d4c align 2**16
         filesz 0x0000001c memsz 0x0000001c flags rw-
    LOAD off    0x00020d68 vaddr 0x08000d68 paddr 0x08000d68 align 2**16
         filesz 0x000001d4 memsz 0x000001d4 flags rw-
    LOAD off    0x0000001c vaddr 0x2000001c paddr 0x2000001c align 2**16
         filesz 0x00000000 memsz 0x00000644 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000001c  20000000  08000d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rodata       000001d4  08000d68  08000d68  00020d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000644  2000001c  2000001c  0003001c  2**2
                  ALLOC
  5 .debug_info   000034c5  00000000  00000000  00020f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000d6b  00000000  00000000  00024401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 000000f0  00000000  00000000  0002516c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001231  00000000  00000000  0002525c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000013f6  00000000  00000000  0002648d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000049  00000000  00000000  00027883  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 0000002e  00000000  00000000  000278cc  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000570  00000000  00000000  000278fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000020  00000000  00000000  00027e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000194 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
08000d68 l    d  .rodata	00000000 .rodata
2000001c l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 stm32_startup.cpp
00000000 l    df *ABS*	00000000 Clock_Driver.cpp
08000d68 l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
08000d6c l     O .rodata	00000004 RCC_ADDRESS
08000d70 l     O .rodata	00000004 CRC_ADDRESS
08000d74 l     O .rodata	00000004 GPIOA_ADDRESS
08000d78 l     O .rodata	00000004 GPIOB_ADDRESS
08000d7c l     O .rodata	00000004 GPIOC_ADDRESS
08000d80 l     O .rodata	00000004 GPIOD_ADDRESS
08000d84 l     O .rodata	00000004 GPIOE_ADDRESS
08000d88 l     O .rodata	00000004 GPIOH_ADDRESS
08000d8c l     O .rodata	00000004 EXTI_ADDRESS
08000d90 l     O .rodata	00000004 SYSCFG_ADDRESS
08000d94 l     O .rodata	00000004 USART2_ADDRESS
08000d98 l     O .rodata	00000004 USART1_ADDRESS
08000d9c l     O .rodata	00000004 USART6_ADDRESS
00000000 l    df *ABS*	00000000 GPIO_Driver.cpp
08000da4 l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
08000da8 l     O .rodata	00000004 RCC_ADDRESS
08000dac l     O .rodata	00000004 CRC_ADDRESS
08000db0 l     O .rodata	00000004 GPIOA_ADDRESS
08000db4 l     O .rodata	00000004 GPIOB_ADDRESS
08000db8 l     O .rodata	00000004 GPIOC_ADDRESS
08000dbc l     O .rodata	00000004 GPIOD_ADDRESS
08000dc0 l     O .rodata	00000004 GPIOE_ADDRESS
08000dc4 l     O .rodata	00000004 GPIOH_ADDRESS
08000dc8 l     O .rodata	00000004 EXTI_ADDRESS
08000dcc l     O .rodata	00000004 SYSCFG_ADDRESS
08000dd0 l     O .rodata	00000004 USART2_ADDRESS
08000dd4 l     O .rodata	00000004 USART1_ADDRESS
08000dd8 l     O .rodata	00000004 USART6_ADDRESS
00000000 l    df *ABS*	00000000 main.cpp
08000ddc l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
08000de0 l     O .rodata	00000004 RCC_ADDRESS
08000de4 l     O .rodata	00000004 CRC_ADDRESS
08000de8 l     O .rodata	00000004 GPIOA_ADDRESS
08000dec l     O .rodata	00000004 GPIOB_ADDRESS
08000df0 l     O .rodata	00000004 GPIOC_ADDRESS
08000df4 l     O .rodata	00000004 GPIOD_ADDRESS
08000df8 l     O .rodata	00000004 GPIOE_ADDRESS
08000dfc l     O .rodata	00000004 GPIOH_ADDRESS
08000e00 l     O .rodata	00000004 EXTI_ADDRESS
08000e04 l     O .rodata	00000004 SYSCFG_ADDRESS
08000e08 l     O .rodata	00000004 USART2_ADDRESS
08000e0c l     O .rodata	00000004 USART1_ADDRESS
08000e10 l     O .rodata	00000004 USART6_ADDRESS
08000e14 l     O .rodata	00000004 ARM_SYSTICK_ADDRESS
08000e18 l     O .rodata	00000004 NVIC_ISER_ADDRESS
08000e1c l     O .rodata	00000004 NVIC_ICER_ADDRESS
08000e20 l     O .rodata	00000004 NVIC_ISPR_ADDRESS
08000e24 l     O .rodata	00000004 NVIC_ICPR_ADDRESS
08000e28 l     O .rodata	00000004 NVIC_IABR_ADDRESS
08000e2c l     O .rodata	00000004 NVIC_IPR_ADDRESS
08000e30 l     O .rodata	00000004 NVIC_STIR_ADDRESS
08000e34 l     O .rodata	00000001 NrOfNVICIntSetEnableRegs
08000e35 l     O .rodata	00000001 NrOfNVICIntClearEnableRegs
08000e36 l     O .rodata	00000001 NrOfNVICIntSetPendingRegs
08000e37 l     O .rodata	00000001 NrOfNVICIntClearPendingRegs
08000e38 l     O .rodata	00000001 NrOfNVICIntActivateBitRegs
08000e39 l     O .rodata	00000001 NrOfNVICIntPrioRegs
08000e3a l     O .rodata	00000001 UART_MAXSIZE_BUFFER
00000000 l    df *ABS*	00000000 m_memory.cpp
00000000 l    df *ABS*	00000000 NVIC_Drivers.cpp
08000e60 l     O .rodata	00000004 ARM_SYSTICK_ADDRESS
08000e64 l     O .rodata	00000004 NVIC_ISER_ADDRESS
08000e68 l     O .rodata	00000004 NVIC_ICER_ADDRESS
08000e6c l     O .rodata	00000004 NVIC_ISPR_ADDRESS
08000e70 l     O .rodata	00000004 NVIC_ICPR_ADDRESS
08000e74 l     O .rodata	00000004 NVIC_IABR_ADDRESS
08000e78 l     O .rodata	00000004 NVIC_IPR_ADDRESS
08000e7c l     O .rodata	00000004 NVIC_STIR_ADDRESS
08000e80 l     O .rodata	00000001 NrOfNVICIntSetEnableRegs
08000e81 l     O .rodata	00000001 NrOfNVICIntClearEnableRegs
08000e82 l     O .rodata	00000001 NrOfNVICIntSetPendingRegs
08000e83 l     O .rodata	00000001 NrOfNVICIntClearPendingRegs
08000e84 l     O .rodata	00000001 NrOfNVICIntActivateBitRegs
08000e85 l     O .rodata	00000001 NrOfNVICIntPrioRegs
00000000 l    df *ABS*	00000000 SysTick.cpp
00000000 l    df *ABS*	00000000 UART_Driver.cpp
08000e88 l     O .rodata	00000004 FLASH_INTERFACE_ADDRESS
08000e8c l     O .rodata	00000004 RCC_ADDRESS
08000e90 l     O .rodata	00000004 CRC_ADDRESS
08000e94 l     O .rodata	00000004 GPIOA_ADDRESS
08000e98 l     O .rodata	00000004 GPIOB_ADDRESS
08000e9c l     O .rodata	00000004 GPIOC_ADDRESS
08000ea0 l     O .rodata	00000004 GPIOD_ADDRESS
08000ea4 l     O .rodata	00000004 GPIOE_ADDRESS
08000ea8 l     O .rodata	00000004 GPIOH_ADDRESS
08000eac l     O .rodata	00000004 EXTI_ADDRESS
08000eb0 l     O .rodata	00000004 SYSCFG_ADDRESS
08000eb4 l     O .rodata	00000004 USART2_ADDRESS
08000eb8 l     O .rodata	00000004 USART1_ADDRESS
08000ebc l     O .rodata	00000004 USART6_ADDRESS
08000ec0 l     O .rodata	00000004 ARM_SYSTICK_ADDRESS
08000ec4 l     O .rodata	00000004 NVIC_ISER_ADDRESS
08000ec8 l     O .rodata	00000004 NVIC_ICER_ADDRESS
08000ecc l     O .rodata	00000004 NVIC_ISPR_ADDRESS
08000ed0 l     O .rodata	00000004 NVIC_ICPR_ADDRESS
08000ed4 l     O .rodata	00000004 NVIC_IABR_ADDRESS
08000ed8 l     O .rodata	00000004 NVIC_IPR_ADDRESS
08000edc l     O .rodata	00000004 NVIC_STIR_ADDRESS
08000ee0 l     O .rodata	00000001 NrOfNVICIntSetEnableRegs
08000ee1 l     O .rodata	00000001 NrOfNVICIntClearEnableRegs
08000ee2 l     O .rodata	00000001 NrOfNVICIntSetPendingRegs
08000ee3 l     O .rodata	00000001 NrOfNVICIntClearPendingRegs
08000ee4 l     O .rodata	00000001 NrOfNVICIntActivateBitRegs
08000ee5 l     O .rodata	00000001 NrOfNVICIntPrioRegs
08000ee6 l     O .rodata	00000001 UART_MAXSIZE_BUFFER
08000ee8 l     O .rodata	00000050 BaudrateLookUpTable
08000c78 l     F .text	00000054 __static_initialization_and_destruction_0(int, int)
08000ccc l     F .text	00000010 _GLOBAL__sub_I_USART2
080006b8 g     F .text	00000014 Reset_Handler()
080003d8 g     F .text	00000040 NVIC::NVIC_EnableInterrupt(unsigned char)
08000d08  w    F .text	00000042 USART::USART(USART_Registers_t*)
080004a0 g     F .text	00000044 NVIC::NVIC_ClearInterruptPending(unsigned char)
0800096c g     F .text	0000012c USART::Print(char const*, unsigned long, unsigned long)
08000d4c g       .text	00000000 _text_end
08000708 g     F .text	00000110 USART::ConfigBaudRate(unsigned long)
20000024 g     O .bss	00000010 USART2
0800037c g     F .text	00000020 USART2_RxInterruptCallback()
080005a8 g     F .text	00000016 EnableAllInterrupts()
080001cc g     F .text	00000042 GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)
08000ba4 g     F .text	0000001a USART::Read(char*, unsigned long, unsigned long)
2000001c g       .bss	00000000 _bss_start
080001b0 g     F .text	0000001c Clock::EnableClock_GPIOA()
08000678 g     F .text	00000040 call_ctors()
08000a98 g     F .text	0000010c USART::PrintIT(char const*, unsigned long, unsigned long)
08000f3c g       .rodata	00000000 _init_array_end
08000418 g     F .text	00000044 NVIC::NVIC_DisableInterrupt(unsigned char)
08000194 g     F .text	0000001c Clock::EnableClock_USART2()
20000660 g       .bss	00000000 _bss_end
2000001c g     O .bss	00000004 globalTime
20000258 g     O .bss	00000204 USART::USART2_MessageStr
2000045c g     O .bss	00000204 USART::USART6_MessageStr
08000da0 g     O .rodata	00000004 Clock::registers
08000000 g     O .isr_vector	00000194 vector_table
20000660 g       .bss	00000000 end
0800045c g     F .text	00000044 NVIC::NVIC_SetInterruptPending(unsigned char)
20000000 g       .data	00000000 _data_start
080005f4 g     F .text	00000084 init_ram()
20000020 g     O .bss	00000004 bss_size
2000001c g       .data	00000000 _data_end
20000054 g     O .bss	00000204 USART::USART1_MessageStr
08000c6c  w    F .text	0000000c USART6_RxInterruptCallback()
080002ec g     F .text	00000090 main
20000044 g     O .bss	00000010 USART6
08000818 g     F .text	00000154 USART::Init()
0800039c g     F .text	0000003a m_memcpy(void*, void const*, unsigned long)
08000cdc  w    F .text	0000002c GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)
08000c54  w    F .text	0000000c USART1_RxInterruptCallback()
08000bd8 g     F .text	0000007c USART2_Interrupt()
08000cdc  w    F .text	0000002c GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)
080004e4 g     F .text	00000040 NVIC::NVIC_GetInterruptPendingStatus(unsigned char)
08000bbe g     F .text	0000001a USART::ReadIT(char*, unsigned long, unsigned long)
20000034 g     O .bss	00000010 USART1
080005d4 g     F .text	00000020 SetBasePriority(unsigned long)
080005be g     F .text	00000016 DisableAllInterrupts()
0800056c g     F .text	0000003c NVIC::NVIC_GetInterruptPriority(unsigned char)
080006cc g     F .text	0000003c USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t)
08000d08  w    F .text	00000042 USART::USART(USART_Registers_t*)
20000000 g     O .data	0000001c NVIC::registers
08000f38 g       .rodata	00000000 _init_array_start
08000524 g     F .text	00000048 NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)
0800020e g     F .text	000000de GPIO::Init()



Disassembly of section .text:

08000194 <Clock::EnableClock_USART2()>:

volatile clock_registers_t * const Clock::registers = (clock_registers_t *)RCC_ADDRESS;


void Clock::EnableClock_USART2(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
    Clock::registers->APB1ENR |= (1 << RCC_APB1ENR_BitPos::USART2_EN);
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <Clock::EnableClock_USART2()+0x18>)
 800019a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <Clock::EnableClock_USART2()+0x18>)
 800019e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023800 	.word	0x40023800

080001b0 <Clock::EnableClock_GPIOA()>:

void Clock::EnableClock_GPIOA(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    Clock::registers->AHB1ENR |= (1 << RCC_AHB1ENR_BitPos::GPIOA_EN);
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <Clock::EnableClock_GPIOA()+0x18>)
 80001b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <Clock::EnableClock_GPIOA()+0x18>)
 80001ba:	f043 0301 	orr.w	r3, r3, #1
 80001be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40023800 	.word	0x40023800

080001cc <GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)>:
#include "GPIO_Driver.h"

void GPIO::Config(GPIO_port_mode_t mode, GPIO_port_output_config_t output_configuration, GPIO_port_speed_t speed, GPIO_port_pull_t pull_configuration, GPIO_port_alternatefunction_t alternate_function)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	4608      	mov	r0, r1
 80001d6:	4611      	mov	r1, r2
 80001d8:	461a      	mov	r2, r3
 80001da:	4603      	mov	r3, r0
 80001dc:	70fb      	strb	r3, [r7, #3]
 80001de:	460b      	mov	r3, r1
 80001e0:	70bb      	strb	r3, [r7, #2]
 80001e2:	4613      	mov	r3, r2
 80001e4:	707b      	strb	r3, [r7, #1]
    this->mode = mode;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	78fa      	ldrb	r2, [r7, #3]
 80001ea:	701a      	strb	r2, [r3, #0]
    this->output_configuration = output_configuration;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	78ba      	ldrb	r2, [r7, #2]
 80001f0:	705a      	strb	r2, [r3, #1]
    this->speed = speed;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	787a      	ldrb	r2, [r7, #1]
 80001f6:	709a      	strb	r2, [r3, #2]
    this->pull_configuration = pull_configuration;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	7c3a      	ldrb	r2, [r7, #16]
 80001fc:	70da      	strb	r2, [r3, #3]
    this->alternate_function = alternate_function;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	7d3a      	ldrb	r2, [r7, #20]
 8000202:	711a      	strb	r2, [r3, #4]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr

0800020e <GPIO::Init()>:

void GPIO::Init(void)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b082      	sub	sp, #8
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
    // 1. Enable GPIO clock 
    Clock::EnableClock_GPIOA();
 8000216:	f7ff ffcb 	bl	80001b0 <Clock::EnableClock_GPIOA()>

    // 2. Set Mode register
    this->registers->MODER |= (this->mode << (this->pin * 2));
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	4619      	mov	r1, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	7b1b      	ldrb	r3, [r3, #12]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	4619      	mov	r1, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	430a      	orrs	r2, r1
 8000238:	601a      	str	r2, [r3, #0]

    // 3. Set Output type register
    this->registers->OTYPER |= (this->output_configuration << this->pin);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	785b      	ldrb	r3, [r3, #1]
 8000244:	4619      	mov	r1, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	7b1b      	ldrb	r3, [r3, #12]
 800024a:	fa01 f303 	lsl.w	r3, r1, r3
 800024e:	4619      	mov	r1, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	430a      	orrs	r2, r1
 8000256:	605a      	str	r2, [r3, #4]

    // 4. Set pin output speed
    this->registers->OSPEEDR |= (this->speed << (this->pin * 2));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	689a      	ldr	r2, [r3, #8]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	4619      	mov	r1, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	7b1b      	ldrb	r3, [r3, #12]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	4619      	mov	r1, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	430a      	orrs	r2, r1
 8000276:	609a      	str	r2, [r3, #8]

    // 5. Set PullUp/PullDown configuration
    this->registers->PUPDR |= (this->pull_configuration << (this->pin * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	68da      	ldr	r2, [r3, #12]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	78db      	ldrb	r3, [r3, #3]
 8000282:	4619      	mov	r1, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	7b1b      	ldrb	r3, [r3, #12]
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	4619      	mov	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	430a      	orrs	r2, r1
 8000296:	60da      	str	r2, [r3, #12]

    // 6. Set Alternate Function register
    this->pin < PIN8 ? (this->registers->AFRL |= this->alternate_function << (this->pin * 4)) : 
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	7b1b      	ldrb	r3, [r3, #12]
 800029c:	2b07      	cmp	r3, #7
 800029e:	d810      	bhi.n	80002c2 <GPIO::Init()+0xb4>
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	6a1a      	ldr	r2, [r3, #32]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	791b      	ldrb	r3, [r3, #4]
 80002aa:	4619      	mov	r1, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	7b1b      	ldrb	r3, [r3, #12]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	430a      	orrs	r2, r1
 80002be:	621a      	str	r2, [r3, #32]
                       (this->registers->AFRH |= this->alternate_function << ((this->pin - 8) * 4));
 80002c0:	e010      	b.n	80002e4 <GPIO::Init()+0xd6>
                       (this->registers->AFRH |= this->alternate_function << ((this->pin - 8) * 4));
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	4619      	mov	r1, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	7b1b      	ldrb	r3, [r3, #12]
 80002d2:	3b08      	subs	r3, #8
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	4619      	mov	r1, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	430a      	orrs	r2, r1
 80002e2:	625a      	str	r2, [r3, #36]	; 0x24
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <main>:
#include "UART_Driver.h"
#include "general_types.h"


int main(void)
{
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af02      	add	r7, sp, #8
    char text[] = "USART2 running\n\r";
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <main+0x84>)
 80002f4:	463c      	mov	r4, r7
 80002f6:	461d      	mov	r5, r3
 80002f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	682b      	ldr	r3, [r5, #0]
 80002fe:	7023      	strb	r3, [r4, #0]
    SetBasePriority(0xFF);
 8000300:	20ff      	movs	r0, #255	; 0xff
 8000302:	f000 f967 	bl	80005d4 <SetBasePriority(unsigned long)>
    EnableAllInterrupts();
 8000306:	f000 f94f 	bl	80005a8 <EnableAllInterrupts()>
    // Set the interrupt priority for USART2
    NVIC::NVIC_SetInterruptPriority(USART2_INT_POS, 0xFFu);
 800030a:	21ff      	movs	r1, #255	; 0xff
 800030c:	2026      	movs	r0, #38	; 0x26
 800030e:	f000 f909 	bl	8000524 <NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)>
    (void)USART2.Config(WORD_LENTGTH_8BIT, NO_PARITY, 9600, NO_STOPBITS_2);
 8000312:	2302      	movs	r3, #2
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	4815      	ldr	r0, [pc, #84]	; (8000374 <main+0x88>)
 8000320:	f000 f9d4 	bl	80006cc <USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t)>
    if(USART2.Init() == ST_OK)
 8000324:	4813      	ldr	r0, [pc, #76]	; (8000374 <main+0x88>)
 8000326:	f000 fa77 	bl	8000818 <USART::Init()>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d015      	beq.n	8000366 <main+0x7a>
    {
        while(1)
        {
            for(uint32_t count = 0; count < 1000000; count++);
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <main+0x8c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d803      	bhi.n	800034e <main+0x62>
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	3301      	adds	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	e7f7      	b.n	800033e <main+0x52>
            if(USART2.currentState == USART_AVAILABLE)
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <main+0x88>)
 8000350:	7a9b      	ldrb	r3, [r3, #10]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d1f1      	bne.n	800033a <main+0x4e>
            {
                USART2.PrintIT((const char*)text, sizeof(text), MAX_DELAY);
 8000356:	4639      	mov	r1, r7
 8000358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800035c:	2211      	movs	r2, #17
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <main+0x88>)
 8000360:	f000 fb9a 	bl	8000a98 <USART::PrintIT(char const*, unsigned long, unsigned long)>
            }
        
        }
 8000364:	e7e9      	b.n	800033a <main+0x4e>
    else
    {
        // should not be reached
    }

}
 8000366:	2300      	movs	r3, #0
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bdb0      	pop	{r4, r5, r7, pc}
 8000370:	08000e3c 	.word	0x08000e3c
 8000374:	20000024 	.word	0x20000024
 8000378:	000f423f 	.word	0x000f423f

0800037c <USART2_RxInterruptCallback()>:

void USART2_RxInterruptCallback()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    USART2.Print("Ana are mere", 14, MAX_DELAY);
 8000380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000384:	220e      	movs	r2, #14
 8000386:	4903      	ldr	r1, [pc, #12]	; (8000394 <USART2_RxInterruptCallback()+0x18>)
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <USART2_RxInterruptCallback()+0x1c>)
 800038a:	f000 faef 	bl	800096c <USART::Print(char const*, unsigned long, unsigned long)>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	08000e50 	.word	0x08000e50
 8000398:	20000024 	.word	0x20000024

0800039c <m_memcpy(void*, void const*, unsigned long)>:
#include "m_memory.h"

void m_memcpy(void* dest, const void* src, uint32_t count)
{
 800039c:	b480      	push	{r7}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
    for(uint32_t i = 0; i < count; i++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	697a      	ldr	r2, [r7, #20]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d20b      	bcs.n	80003cc <m_memcpy(void*, void const*, unsigned long)+0x30>
        ((uint8_t*)dest)[i] = ((uint8_t*)src)[i];
 80003b4:	68ba      	ldr	r2, [r7, #8]
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	441a      	add	r2, r3
 80003ba:	68f9      	ldr	r1, [r7, #12]
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	440b      	add	r3, r1
 80003c0:	7812      	ldrb	r2, [r2, #0]
 80003c2:	701a      	strb	r2, [r3, #0]
    for(uint32_t i = 0; i < count; i++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	e7ef      	b.n	80003ac <m_memcpy(void*, void const*, unsigned long)+0x10>
 80003cc:	bf00      	nop
 80003ce:	371c      	adds	r7, #28
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
	...

080003d8 <NVIC::NVIC_EnableInterrupt(unsigned char)>:
                                                (uint32_t *)NVIC_STIR_ADDRESS
                                            };


void NVIC::NVIC_EnableInterrupt(uint8_t IRn)
{
 80003d8:	b490      	push	{r4, r7}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ISER[IRn/32u] |= (1u << (IRn % 32u));
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <NVIC::NVIC_EnableInterrupt(unsigned char)+0x3c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	0952      	lsrs	r2, r2, #5
 80003ea:	b2d4      	uxtb	r4, r2
 80003ec:	4622      	mov	r2, r4
 80003ee:	0092      	lsls	r2, r2, #2
 80003f0:	441a      	add	r2, r3
 80003f2:	6811      	ldr	r1, [r2, #0]
 80003f4:	79fa      	ldrb	r2, [r7, #7]
 80003f6:	f002 021f 	and.w	r2, r2, #31
 80003fa:	2001      	movs	r0, #1
 80003fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000400:	4620      	mov	r0, r4
 8000402:	0080      	lsls	r0, r0, #2
 8000404:	4403      	add	r3, r0
 8000406:	430a      	orrs	r2, r1
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bc90      	pop	{r4, r7}
 8000412:	4770      	bx	lr
 8000414:	20000000 	.word	0x20000000

08000418 <NVIC::NVIC_DisableInterrupt(unsigned char)>:

void NVIC::NVIC_DisableInterrupt(uint8_t IRn)
{
 8000418:	b490      	push	{r4, r7}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ICER[IRn/32u] |= (1 << (IRn % 32u));
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <NVIC::NVIC_DisableInterrupt(unsigned char)+0x40>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	79fa      	ldrb	r2, [r7, #7]
 8000428:	0952      	lsrs	r2, r2, #5
 800042a:	b2d4      	uxtb	r4, r2
 800042c:	4622      	mov	r2, r4
 800042e:	0092      	lsls	r2, r2, #2
 8000430:	441a      	add	r2, r3
 8000432:	6812      	ldr	r2, [r2, #0]
 8000434:	79f9      	ldrb	r1, [r7, #7]
 8000436:	f001 011f 	and.w	r1, r1, #31
 800043a:	2001      	movs	r0, #1
 800043c:	fa00 f101 	lsl.w	r1, r0, r1
 8000440:	4608      	mov	r0, r1
 8000442:	4621      	mov	r1, r4
 8000444:	0089      	lsls	r1, r1, #2
 8000446:	440b      	add	r3, r1
 8000448:	4302      	orrs	r2, r0
 800044a:	601a      	str	r2, [r3, #0]
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bc90      	pop	{r4, r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000000 	.word	0x20000000

0800045c <NVIC::NVIC_SetInterruptPending(unsigned char)>:

void NVIC::NVIC_SetInterruptPending(uint8_t IRn)
{
 800045c:	b490      	push	{r4, r7}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ISPR[IRn/32u] |= (1 << (IRn % 32u));
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <NVIC::NVIC_SetInterruptPending(unsigned char)+0x40>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	79fa      	ldrb	r2, [r7, #7]
 800046c:	0952      	lsrs	r2, r2, #5
 800046e:	b2d4      	uxtb	r4, r2
 8000470:	4622      	mov	r2, r4
 8000472:	0092      	lsls	r2, r2, #2
 8000474:	441a      	add	r2, r3
 8000476:	6812      	ldr	r2, [r2, #0]
 8000478:	79f9      	ldrb	r1, [r7, #7]
 800047a:	f001 011f 	and.w	r1, r1, #31
 800047e:	2001      	movs	r0, #1
 8000480:	fa00 f101 	lsl.w	r1, r0, r1
 8000484:	4608      	mov	r0, r1
 8000486:	4621      	mov	r1, r4
 8000488:	0089      	lsls	r1, r1, #2
 800048a:	440b      	add	r3, r1
 800048c:	4302      	orrs	r2, r0
 800048e:	601a      	str	r2, [r3, #0]
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bc90      	pop	{r4, r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000000 	.word	0x20000000

080004a0 <NVIC::NVIC_ClearInterruptPending(unsigned char)>:

void NVIC::NVIC_ClearInterruptPending(uint8_t IRn)
{
 80004a0:	b490      	push	{r4, r7}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    registers.NVIC_ICPR[IRn/32u] |= (1 << (IRn % 32u));
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <NVIC::NVIC_ClearInterruptPending(unsigned char)+0x40>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	79fa      	ldrb	r2, [r7, #7]
 80004b0:	0952      	lsrs	r2, r2, #5
 80004b2:	b2d4      	uxtb	r4, r2
 80004b4:	4622      	mov	r2, r4
 80004b6:	0092      	lsls	r2, r2, #2
 80004b8:	441a      	add	r2, r3
 80004ba:	6812      	ldr	r2, [r2, #0]
 80004bc:	79f9      	ldrb	r1, [r7, #7]
 80004be:	f001 011f 	and.w	r1, r1, #31
 80004c2:	2001      	movs	r0, #1
 80004c4:	fa00 f101 	lsl.w	r1, r0, r1
 80004c8:	4608      	mov	r0, r1
 80004ca:	4621      	mov	r1, r4
 80004cc:	0089      	lsls	r1, r1, #2
 80004ce:	440b      	add	r3, r1
 80004d0:	4302      	orrs	r2, r0
 80004d2:	601a      	str	r2, [r3, #0]
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc90      	pop	{r4, r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000000 	.word	0x20000000

080004e4 <NVIC::NVIC_GetInterruptPendingStatus(unsigned char)>:

bool NVIC::NVIC_GetInterruptPendingStatus(uint8_t IRn)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
    return registers.NVIC_ISPR[IRn/32u] & (1 << (IRn % 32u));
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <NVIC::NVIC_GetInterruptPendingStatus(unsigned char)+0x3c>)
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	095b      	lsrs	r3, r3, #5
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	4413      	add	r3, r2
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	f002 021f 	and.w	r2, r2, #31
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2db      	uxtb	r3, r3
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	20000000 	.word	0x20000000

08000524 <NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)>:

void NVIC::NVIC_SetInterruptPriority(uint8_t IRn, uint8_t priority)
{
 8000524:	b490      	push	{r4, r7}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
    registers.NVIC_IPR[IRn/4u] |= (priority << (IRn % 4u));
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <NVIC::NVIC_SetInterruptPriority(unsigned char, unsigned char)+0x44>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	0892      	lsrs	r2, r2, #2
 800053c:	b2d4      	uxtb	r4, r2
 800053e:	4622      	mov	r2, r4
 8000540:	0092      	lsls	r2, r2, #2
 8000542:	441a      	add	r2, r3
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	79b8      	ldrb	r0, [r7, #6]
 8000548:	79f9      	ldrb	r1, [r7, #7]
 800054a:	f001 0103 	and.w	r1, r1, #3
 800054e:	fa00 f101 	lsl.w	r1, r0, r1
 8000552:	4608      	mov	r0, r1
 8000554:	4621      	mov	r1, r4
 8000556:	0089      	lsls	r1, r1, #2
 8000558:	440b      	add	r3, r1
 800055a:	4302      	orrs	r2, r0
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bc90      	pop	{r4, r7}
 8000566:	4770      	bx	lr
 8000568:	20000000 	.word	0x20000000

0800056c <NVIC::NVIC_GetInterruptPriority(unsigned char)>:

uint8_t NVIC::NVIC_GetInterruptPriority(uint8_t IRn)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
    return registers.NVIC_IPR[IRn/4u] & (1 << (IRn % 4u));
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <NVIC::NVIC_GetInterruptPriority(unsigned char)+0x38>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	089b      	lsrs	r3, r3, #2
 800057e:	b2db      	uxtb	r3, r3
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	b2da      	uxtb	r2, r3
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 0303 	and.w	r3, r3, #3
 800058e:	2101      	movs	r1, #1
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4013      	ands	r3, r2
 8000598:	b2db      	uxtb	r3, r3
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000000 	.word	0x20000000

080005a8 <EnableAllInterrupts()>:

void EnableAllInterrupts() {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
    asm volatile("cpsie i");  // Enable interrupts globally
 80005ac:	b662      	cpsie	i
    asm volatile("dsb");      // Data Synchronization Barrier
 80005ae:	f3bf 8f4f 	dsb	sy
    asm volatile("isb");      // Instruction Synchronization Barrier
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <DisableAllInterrupts()>:

void DisableAllInterrupts() {
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
    asm volatile("cpsid i");  // Disable interrupts globally
 80005c2:	b672      	cpsid	i
    asm volatile("dsb");      // Data Synchronization Barrier
 80005c4:	f3bf 8f4f 	dsb	sy
    asm volatile("isb");      // Instruction Synchronization Barrier
 80005c8:	f3bf 8f6f 	isb	sy
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <SetBasePriority(unsigned long)>:

void SetBasePriority(uint32_t priority) {
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    asm volatile("msr basepri, %0" : : "r"(priority));  // Set BASEPRI
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f383 8811 	msr	BASEPRI, r3
    asm volatile("dsb");      // Data Synchronization Barrier
 80005e2:	f3bf 8f4f 	dsb	sy
    asm volatile("isb");      // Instruction Synchronization Barrier
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <init_ram()>:
    (uint32_t)SPI4_Interrupt
};


void init_ram(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
    uint32_t bss_size, data_size;
    uint32_t i, j;
    uint8_t *pDest, *pSrc;

   
   bss_size = (uint8_t *)&_bss_end - (uint8_t *)&_bss_start;
 80005fa:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <init_ram()+0x70>)
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <init_ram()+0x74>)
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	60fb      	str	r3, [r7, #12]
   data_size = (uint8_t *)&_data_end - (uint8_t *)&_data_start;
 8000602:	4a1a      	ldr	r2, [pc, #104]	; (800066c <init_ram()+0x78>)
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <init_ram()+0x7c>)
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	60bb      	str	r3, [r7, #8]
   

    pDest = (uint8_t*)&_bss_start;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <init_ram()+0x74>)
 800060c:	607b      	str	r3, [r7, #4]
    for(j = 0; j < bss_size; j++)
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	d208      	bcs.n	800062c <init_ram()+0x38>
    {
        pDest[j] = 0;
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	4413      	add	r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < bss_size; j++)
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	3301      	adds	r3, #1
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	e7f2      	b.n	8000612 <init_ram()+0x1e>
    }

    pDest = (uint8_t*)&_data_start;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <init_ram()+0x7c>)
 800062e:	607b      	str	r3, [r7, #4]
    pSrc = (uint8_t*)&_text_end;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <init_ram()+0x80>)
 8000632:	603b      	str	r3, [r7, #0]
    for(i = 0; i < data_size; i++)
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	429a      	cmp	r2, r3
 800063e:	d20b      	bcs.n	8000658 <init_ram()+0x64>
    {
        pDest[i] = pSrc[i];
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	441a      	add	r2, r3
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	440b      	add	r3, r1
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < data_size; i++)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3301      	adds	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
 8000656:	e7ef      	b.n	8000638 <init_ram()+0x44>
    }
}
 8000658:	bf00      	nop
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000660 	.word	0x20000660
 8000668:	2000001c 	.word	0x2000001c
 800066c:	2000001c 	.word	0x2000001c
 8000670:	20000000 	.word	0x20000000
 8000674:	08000d4c 	.word	0x08000d4c

08000678 <call_ctors()>:

void call_ctors(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
    uint32_t count = _init_array_end - _init_array_start;
 800067e:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <call_ctors()+0x38>)
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <call_ctors()+0x3c>)
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	109b      	asrs	r3, r3, #2
 8000686:	603b      	str	r3, [r7, #0]
    
    for(uint32_t i = 0; i < count; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	d208      	bcs.n	80006a6 <call_ctors()+0x2e>
        _init_array_start[i] ();
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <call_ctors()+0x3c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069c:	4798      	blx	r3
    for(uint32_t i = 0; i < count; i++)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	e7f2      	b.n	800068c <call_ctors()+0x14>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08000f3c 	.word	0x08000f3c
 80006b4:	08000f38 	.word	0x08000f38

080006b8 <Reset_Handler()>:

void Reset_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    init_ram();
 80006bc:	f7ff ff9a 	bl	80005f4 <init_ram()>

    call_ctors();
 80006c0:	f7ff ffda 	bl	8000678 <call_ctors()>

    main();
 80006c4:	f7ff fe12 	bl	80002ec <main>
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <USART::Config(USART_word_length_t, USART_parity_t, unsigned long, USART_num_stop_bits_t)>:
void USART1_RxInterruptCallback() __attribute__((weak));
void USART2_RxInterruptCallback() __attribute__((weak));
void USART6_RxInterruptCallback() __attribute__((weak));

OperationStatus_t USART::Config(const USART_word_length_t word_length, const USART_parity_t parity, const uint32_t baud_rate, const USART_num_stop_bits_t no_stop_bits)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	460b      	mov	r3, r1
 80006d8:	72fb      	strb	r3, [r7, #11]
 80006da:	4613      	mov	r3, r2
 80006dc:	72bb      	strb	r3, [r7, #10]
    OperationStatus_t retVal = ST_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	75fb      	strb	r3, [r7, #23]

    // 1. Word length configuration
    this->word_length = word_length;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	7afa      	ldrb	r2, [r7, #11]
 80006e6:	701a      	strb	r2, [r3, #0]

    // 2. Parity configuration
    this->parity = parity;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	7aba      	ldrb	r2, [r7, #10]
 80006ec:	721a      	strb	r2, [r3, #8]

    // 3. Configure number of stop bits
    this->no_stop_bits = no_stop_bits;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006f4:	705a      	strb	r2, [r3, #1]

    // 4. Configure baud rate
    this->baud_rate = baud_rate;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	605a      	str	r2, [r3, #4]


    return retVal;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	371c      	adds	r7, #28
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <USART::ConfigBaudRate(unsigned long)>:

OperationStatus_t USART::ConfigBaudRate(const uint32_t baud_rate)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
    OperationStatus_t retVal = ST_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
    uint8_t index = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	73bb      	strb	r3, [r7, #14]
    uint16_t BaudrateLookUpTable_length = sizeof(BaudrateLookUpTable)/sizeof(USART_baudrate_comp_t);
 800071a:	230a      	movs	r3, #10
 800071c:	81bb      	strh	r3, [r7, #12]

    if(   ((Clock::registers->CFGR) & (0b100 << RCC_CFGR_BitPos::PPRE1) ) 
 800071e:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <USART::ConfigBaudRate(unsigned long)+0x108>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
        ||((Clock::registers->CFGR) & (0b1000 << RCC_CFGR_BitPos::HPRE) ) 
        ||(this->registers->CR1    & (1 << USART_CR1_BitPos::OVER8) ) 
        ||(this->currentState == USART_BUSY) )
 8000728:	2b00      	cmp	r3, #0
 800072a:	d111      	bne.n	8000750 <USART::ConfigBaudRate(unsigned long)+0x48>
        ||((Clock::registers->CFGR) & (0b1000 << RCC_CFGR_BitPos::HPRE) ) 
 800072c:	4b38      	ldr	r3, [pc, #224]	; (8000810 <USART::ConfigBaudRate(unsigned long)+0x108>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10a      	bne.n	8000750 <USART::ConfigBaudRate(unsigned long)+0x48>
        ||(this->registers->CR1    & (1 << USART_CR1_BitPos::OVER8) ) 
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <USART::ConfigBaudRate(unsigned long)+0x48>
        ||(this->currentState == USART_BUSY) )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7a9b      	ldrb	r3, [r3, #10]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <USART::ConfigBaudRate(unsigned long)+0x4c>
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <USART::ConfigBaudRate(unsigned long)+0x4e>
 8000754:	2300      	movs	r3, #0
    if(   ((Clock::registers->CFGR) & (0b100 << RCC_CFGR_BitPos::PPRE1) ) 
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART::ConfigBaudRate(unsigned long)+0x58>
    {
        /* To be implemented, a function that computes the oversampling and division values dynamically */
        retVal = ST_NOK;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e050      	b.n	8000802 <USART::ConfigBaudRate(unsigned long)+0xfa>
    }
    else
    {
        this->registers->BRR = 0x00;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
        while( (BaudrateLookUpTable[index].baud_rate != baud_rate) && (++index < BaudrateLookUpTable_length) );
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <USART::ConfigBaudRate(unsigned long)+0x10c>)
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	4413      	add	r3, r2
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d008      	beq.n	800078a <USART::ConfigBaudRate(unsigned long)+0x82>
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	3301      	adds	r3, #1
 800077c:	73bb      	strb	r3, [r7, #14]
 800077e:	7bba      	ldrb	r2, [r7, #14]
 8000780:	89bb      	ldrh	r3, [r7, #12]
 8000782:	429a      	cmp	r2, r3
 8000784:	da01      	bge.n	800078a <USART::ConfigBaudRate(unsigned long)+0x82>
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <USART::ConfigBaudRate(unsigned long)+0x84>
 800078a:	2300      	movs	r3, #0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <USART::ConfigBaudRate(unsigned long)+0x8a>
 8000790:	e7ea      	b.n	8000768 <USART::ConfigBaudRate(unsigned long)+0x60>
        if(index == BaudrateLookUpTable_length)
 8000792:	7bba      	ldrb	r2, [r7, #14]
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	429a      	cmp	r2, r3
 8000798:	d113      	bne.n	80007c2 <USART::ConfigBaudRate(unsigned long)+0xba>
        {
            // This is the default case, the requested baud rate is not supported
            this->registers->BRR |= (BaudrateLookUpTable[2].fraction << USART_BRR_BitPos::FRACTION);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	2303      	movs	r3, #3
 80007a2:	4619      	mov	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	430a      	orrs	r2, r1
 80007aa:	609a      	str	r2, [r3, #8]
            this->registers->BRR |= (BaudrateLookUpTable[2].mantissa << USART_BRR_BitPos::MANTISSA);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	2368      	movs	r3, #104	; 0x68
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	430a      	orrs	r2, r1
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	e01f      	b.n	8000802 <USART::ConfigBaudRate(unsigned long)+0xfa>
        }
        else
        {
            this->registers->BRR |= (BaudrateLookUpTable[index].fraction << USART_BRR_BitPos::FRACTION);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	4912      	ldr	r1, [pc, #72]	; (8000814 <USART::ConfigBaudRate(unsigned long)+0x10c>)
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	440b      	add	r3, r1
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	430a      	orrs	r2, r1
 80007e0:	609a      	str	r2, [r3, #8]
            this->registers->BRR |= (BaudrateLookUpTable[index].mantissa << USART_BRR_BitPos::MANTISSA);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	490a      	ldr	r1, [pc, #40]	; (8000814 <USART::ConfigBaudRate(unsigned long)+0x10c>)
 80007ec:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80007f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	430a      	orrs	r2, r1
 8000800:	609a      	str	r2, [r3, #8]
        }
    }

    return retVal;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	08000da0 	.word	0x08000da0
 8000814:	08000ee8 	.word	0x08000ee8

08000818 <USART::Init()>:


OperationStatus_t USART::Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
    OperationStatus_t retVal = ST_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // 1. Enable USART Clock
    Clock::EnableClock_USART2();
 8000826:	f7ff fcb5 	bl	8000194 <Clock::EnableClock_USART2()>

    // 2. Configure GPIO
    GPIO PA2_USART2TX(GPIOA, PIN2);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2202      	movs	r2, #2
 8000830:	494d      	ldr	r1, [pc, #308]	; (8000968 <USART::Init()+0x150>)
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fa52 	bl	8000cdc <GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)>
    GPIO PA3_USART2RX(GPIOA, PIN3);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2203      	movs	r2, #3
 800083e:	494a      	ldr	r1, [pc, #296]	; (8000968 <USART::Init()+0x150>)
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fa4b 	bl	8000cdc <GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)>
    PA2_USART2TX.Config(ALTERNATE_FUNCTION, OUT_PUSHPULL, MEDIUM_SPEED, NO_PULL_UP_DOWN, AF7);
 8000846:	f107 001c 	add.w	r0, r7, #28
 800084a:	2307      	movs	r3, #7
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	2300      	movs	r3, #0
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	2200      	movs	r2, #0
 8000856:	2102      	movs	r1, #2
 8000858:	f7ff fcb8 	bl	80001cc <GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)>
    PA3_USART2RX.Config(ALTERNATE_FUNCTION, OUT_PUSHPULL, MEDIUM_SPEED, NO_PULL_UP_DOWN, AF7);
 800085c:	f107 000c 	add.w	r0, r7, #12
 8000860:	2307      	movs	r3, #7
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	2300      	movs	r3, #0
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	2200      	movs	r2, #0
 800086c:	2102      	movs	r1, #2
 800086e:	f7ff fcad 	bl	80001cc <GPIO::Config(GPIO_port_mode_t, GPIO_port_output_config_t, GPIO_port_speed_t, GPIO_port_pull_t, GPIO_port_alternatefunction_t)>
    PA2_USART2TX.Init();
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fcc9 	bl	800020e <GPIO::Init()>
    PA3_USART2RX.Init();
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fcc4 	bl	800020e <GPIO::Init()>

    // 1. Enable USART by writing UE bit in CR1
    this->registers->CR1 |= (1 << USART_CR1_BitPos::UE);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000894:	60da      	str	r2, [r3, #12]

    // 2. Word length configuration
    if(WORD_LENTGTH_9BIT == this->word_length)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d108      	bne.n	80008b0 <USART::Init()+0x98>
    {
        this->registers->CR1 |= (1 << USART_CR1_BitPos::M);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	e007      	b.n	80008c0 <USART::Init()+0xa8>
    }
    else
    {
        this->registers->CR1 &= ~(1 << USART_CR1_BitPos::M);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008be:	60da      	str	r2, [r3, #12]
    }

    // 3. Parity configuration
    if(ODD_PARITY == this->parity)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7a1b      	ldrb	r3, [r3, #8]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d110      	bne.n	80008ea <USART::Init()+0xd2>
    {
        this->registers->CR1 |= (1 << USART_CR1_BitPos::PCE); // enable partity
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008d6:	60da      	str	r2, [r3, #12]
        this->registers->CR1 |= (1 << USART_CR1_BitPos::PS);  // select odd parity
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	e01c      	b.n	8000924 <USART::Init()+0x10c>
    }
    else if(EVEN_PARITY == this->parity)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7a1b      	ldrb	r3, [r3, #8]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d110      	bne.n	8000914 <USART::Init()+0xfc>
    {
        this->registers->CR1 |= (1 << USART_CR1_BitPos::PCE); // enable partity
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000900:	60da      	str	r2, [r3, #12]
        this->registers->CR1 &= ~(1 << USART_CR1_BitPos::PS); // select even parity
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	e007      	b.n	8000924 <USART::Init()+0x10c>
    }
    else
    {
        this->registers->CR1 &= ~(1 << USART_CR1_BitPos::PCE); // no parity
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000922:	60da      	str	r2, [r3, #12]
    }

    // 4. Configure number of stop bits
    this->registers->CR2 &= ~(0b11 << USART_CR2_BitPos::STOP); // clean bits
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	691a      	ldr	r2, [r3, #16]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000932:	611a      	str	r2, [r3, #16]
    this->registers->CR2 |= (this->no_stop_bits << USART_CR2_BitPos::STOP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	785b      	ldrb	r3, [r3, #1]
 800093e:	031b      	lsls	r3, r3, #12
 8000940:	4619      	mov	r1, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	430a      	orrs	r2, r1
 8000948:	611a      	str	r2, [r3, #16]

    retVal = this->ConfigBaudRate(this->baud_rate); 
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fed9 	bl	8000708 <USART::ConfigBaudRate(unsigned long)>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    return retVal;
 800095c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000960:	4618      	mov	r0, r3
 8000962:	3730      	adds	r7, #48	; 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40020000 	.word	0x40020000

0800096c <USART::Print(char const*, unsigned long, unsigned long)>:


OperationStatus_t USART::Print(const char *message, uint32_t size, uint32_t waitTime)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	603b      	str	r3, [r7, #0]
    this->currentState = USART_BUSY;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2200      	movs	r2, #0
 800097e:	729a      	strb	r2, [r3, #10]
    uint32_t startTime = globalTime;
 8000980:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	613b      	str	r3, [r7, #16]
    uint8_t index = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	75fb      	strb	r3, [r7, #23]
    OperationStatus_t retVal = ST_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	75bb      	strb	r3, [r7, #22]
    
    // 1. Set the TE bit in CR1 to send an Idle Frame as first transmission
    this->registers->CR1 |= (1 << USART_CR1_BitPos::TE);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	f042 0208 	orr.w	r2, r2, #8
 800099c:	60da      	str	r2, [r3, #12]

    // 2. Write data to DR register, this will clear TXE bit, repeat for each byte of data
    this->registers->DR = message[index++];
 800099e:	7dfb      	ldrb	r3, [r7, #23]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	75fa      	strb	r2, [r7, #23]
 80009a4:	461a      	mov	r2, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	605a      	str	r2, [r3, #4]
    while(index < size)
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d936      	bls.n	8000a28 <USART::Print(char const*, unsigned long, unsigned long)+0xbc>
    {
        if(DELAY_EXCEEDED(startTime, globalTime, waitTime)) 
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	441a      	add	r2, r3
 80009c0:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d204      	bcs.n	80009d2 <USART::Print(char const*, unsigned long, unsigned long)+0x66>
 80009c8:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d30c      	bcc.n	80009ec <USART::Print(char const*, unsigned long, unsigned long)+0x80>
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	3b01      	subs	r3, #1
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d206      	bcs.n	80009f0 <USART::Print(char const*, unsigned long, unsigned long)+0x84>
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d901      	bls.n	80009f0 <USART::Print(char const*, unsigned long, unsigned long)+0x84>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <USART::Print(char const*, unsigned long, unsigned long)+0x86>
 80009f0:	2300      	movs	r3, #0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <USART::Print(char const*, unsigned long, unsigned long)+0x8e>
        {
            retVal = TIMEOUT;
 80009f6:	2302      	movs	r3, #2
 80009f8:	75bb      	strb	r3, [r7, #22]
        }

        if(this->registers->SR & (1 << USART_SR_BitPos::TXE))
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0cf      	beq.n	80009b2 <USART::Print(char const*, unsigned long, unsigned long)+0x46>
        {
            this->registers->DR = message[index++];
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	75fa      	strb	r2, [r7, #23]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	605a      	str	r2, [r3, #4]
    while(index < size)
 8000a26:	e7c4      	b.n	80009b2 <USART::Print(char const*, unsigned long, unsigned long)+0x46>
        }
    }


    // 3. After last byte is written to DR wait until TC = 1. This will indicate that the transmission of last byte is complete.
    while(!(this->registers->SR & (1 << USART_SR_BitPos::TC)))
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d020      	beq.n	8000a82 <USART::Print(char const*, unsigned long, unsigned long)+0x116>
    {
        if(DELAY_EXCEEDED(startTime, globalTime, waitTime))
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	441a      	add	r2, r3
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d204      	bcs.n	8000a58 <USART::Print(char const*, unsigned long, unsigned long)+0xec>
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d30c      	bcc.n	8000a72 <USART::Print(char const*, unsigned long, unsigned long)+0x106>
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	3b01      	subs	r3, #1
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d206      	bcs.n	8000a76 <USART::Print(char const*, unsigned long, unsigned long)+0x10a>
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <USART::Print(char const*, unsigned long, unsigned long)+0x128>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d901      	bls.n	8000a76 <USART::Print(char const*, unsigned long, unsigned long)+0x10a>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <USART::Print(char const*, unsigned long, unsigned long)+0x10c>
 8000a76:	2300      	movs	r3, #0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0d5      	beq.n	8000a28 <USART::Print(char const*, unsigned long, unsigned long)+0xbc>
        {
            retVal = TIMEOUT;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	75bb      	strb	r3, [r7, #22]
    while(!(this->registers->SR & (1 << USART_SR_BitPos::TC)))
 8000a80:	e7d2      	b.n	8000a28 <USART::Print(char const*, unsigned long, unsigned long)+0xbc>
        }   
    }

    this->currentState = USART_AVAILABLE;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2201      	movs	r2, #1
 8000a86:	729a      	strb	r2, [r3, #10]

    return retVal;
 8000a88:	7dbb      	ldrb	r3, [r7, #22]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	2000001c 	.word	0x2000001c

08000a98 <USART::PrintIT(char const*, unsigned long, unsigned long)>:

OperationStatus_t USART::PrintIT(const char *message, uint32_t size, uint32_t waitTime)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	603b      	str	r3, [r7, #0]
    this->currentState = USART_BUSY;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	729a      	strb	r2, [r3, #10]
    OperationStatus_t retVal = ST_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	75fb      	strb	r3, [r7, #23]
    USART::USART2_MessageStr.i_TXBuffer_USART = 0;
 8000ab0:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <USART::PrintIT(char const*, unsigned long, unsigned long)+0xf4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    PARAM_UNUSED(waitTime);

    if( (USART_TX_BUFFER_SIZE < size) && (size > 0) )
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000abe:	d905      	bls.n	8000acc <USART::PrintIT(char const*, unsigned long, unsigned long)+0x34>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <USART::PrintIT(char const*, unsigned long, unsigned long)+0x34>
        retVal = ST_NOK;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	75fb      	strb	r3, [r7, #23]
 8000aca:	e031      	b.n	8000b30 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x98>
    else
    {
        if(this->registers == (USART_Registers_t*)USART1_ADDRESS)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xf8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10a      	bne.n	8000aec <USART::PrintIT(char const*, unsigned long, unsigned long)+0x54>
        {
            m_memcpy((uint8_t*)USART::USART1_MessageStr.TXBuffer_USART, (void*)message, size);
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	482e      	ldr	r0, [pc, #184]	; (8000b94 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xfc>)
 8000adc:	f7ff fc5e 	bl	800039c <m_memcpy(void*, void const*, unsigned long)>
            USART::USART1_MessageStr.tx_Len = size;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <USART::PrintIT(char const*, unsigned long, unsigned long)+0xfc>)
 8000ae6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
 8000aea:	e021      	b.n	8000b30 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x98>
        }
        else if(this->registers == (USART_Registers_t*)USART2_ADDRESS)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x100>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10a      	bne.n	8000b0c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x74>
        {
            m_memcpy((uint8_t*)USART::USART2_MessageStr.TXBuffer_USART, message, size);
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <USART::PrintIT(char const*, unsigned long, unsigned long)+0xf4>)
 8000afc:	f7ff fc4e 	bl	800039c <m_memcpy(void*, void const*, unsigned long)>
            USART::USART2_MessageStr.tx_Len = size;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <USART::PrintIT(char const*, unsigned long, unsigned long)+0xf4>)
 8000b06:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
 8000b0a:	e011      	b.n	8000b30 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x98>
        }
        else if(this->registers == (USART_Registers_t*)USART6_ADDRESS)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x104>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10a      	bne.n	8000b2c <USART::PrintIT(char const*, unsigned long, unsigned long)+0x94>
        {
            m_memcpy((uint8_t*)USART::USART6_MessageStr.TXBuffer_USART, message, size);
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	4821      	ldr	r0, [pc, #132]	; (8000ba0 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x108>)
 8000b1c:	f7ff fc3e 	bl	800039c <m_memcpy(void*, void const*, unsigned long)>
            USART::USART6_MessageStr.tx_Len = size;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x108>)
 8000b26:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
 8000b2a:	e001      	b.n	8000b30 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x98>
        }
        else
        {
            retVal = ST_NOK;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	75fb      	strb	r3, [r7, #23]
        }

    }

    while (!(this->registers->SR & (1 << USART_SR_BitPos::TXE)));
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d000      	beq.n	8000b4a <USART::PrintIT(char const*, unsigned long, unsigned long)+0xb2>
 8000b48:	e7f2      	b.n	8000b30 <USART::PrintIT(char const*, unsigned long, unsigned long)+0x98>
    // Wait for USART to be ready for transmission (TXE flag)
    
    this->registers->DR = USART::USART2_MessageStr.TXBuffer_USART[USART::USART2_MessageStr.i_TXBuffer_USART++];
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <USART::PrintIT(char const*, unsigned long, unsigned long)+0xf4>)
 8000b4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	b2d1      	uxtb	r1, r2
 8000b56:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <USART::PrintIT(char const*, unsigned long, unsigned long)+0xf4>)
 8000b58:	f882 1200 	strb.w	r1, [r2, #512]	; 0x200
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <USART::PrintIT(char const*, unsigned long, unsigned long)+0xf4>)
 8000b60:	5c9b      	ldrb	r3, [r3, r2]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	605a      	str	r2, [r3, #4]

    // Activate the NVIC interrupt for USART
    NVIC::NVIC_EnableInterrupt(USART2_INT_POS);
 8000b6a:	2026      	movs	r0, #38	; 0x26
 8000b6c:	f7ff fc34 	bl	80003d8 <NVIC::NVIC_EnableInterrupt(unsigned char)>
    
    this->registers->CR1 |= (1 << USART_CR1_BitPos::TXEIE) | // Activate transmit register empty interrupt
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 8000b7e:	60da      	str	r2, [r3, #12]
                            (1 << USART_CR1_BitPos::TCIE)  | // Activate transmision complete interrupt

                            (1 << USART_CR1_BitPos::TE);     // Set the TE bit in CR1 to send an Idle Frame as first transmission

    return retVal;
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000258 	.word	0x20000258
 8000b90:	40011000 	.word	0x40011000
 8000b94:	20000054 	.word	0x20000054
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40011400 	.word	0x40011400
 8000ba0:	2000045c 	.word	0x2000045c

08000ba4 <USART::Read(char*, unsigned long, unsigned long)>:

OperationStatus_t USART::Read(char *buffer, uint32_t size, uint32_t timeout)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
    PARAM_UNUSED(timeout);
    PARAM_UNUSED(buffer);
    PARAM_UNUSED(size);
    return ST_OK;
 8000bb2:	2300      	movs	r3, #0

}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <USART::ReadIT(char*, unsigned long, unsigned long)>:

OperationStatus_t USART::ReadIT(char *buffer, uint32_t size, uint32_t timeout)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	603b      	str	r3, [r7, #0]
    PARAM_UNUSED(timeout);
    PARAM_UNUSED(buffer);
    PARAM_UNUSED(size);
    return ST_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <USART2_Interrupt()>:

// There are multiple interrupts multiplexed, make sure to check which interrupt was triggered
void USART2_Interrupt(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    /* Check which interrupt event triggered the interrupt */
    /* 1. Interrupt was triggered by a sent byte */
    if (((USART_Registers_t*)USART2_ADDRESS)->SR & (1 << USART_SR_BitPos::TXE))
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <USART2_Interrupt()+0x70>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d02a      	beq.n	8000c3e <USART2_Interrupt()+0x66>
    {
        if(USART::USART2_MessageStr.i_TXBuffer_USART < USART::USART2_MessageStr.tx_Len)
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <USART2_Interrupt()+0x74>)
 8000bea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <USART2_Interrupt()+0x74>)
 8000bf2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	bf34      	ite	cc
 8000bfc:	2301      	movcc	r3, #1
 8000bfe:	2300      	movcs	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00f      	beq.n	8000c26 <USART2_Interrupt()+0x4e>
        {
            ((USART_Registers_t*)USART2_ADDRESS)->DR = USART::USART2_MessageStr.TXBuffer_USART[USART::USART2_MessageStr.i_TXBuffer_USART++];
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <USART2_Interrupt()+0x74>)
 8000c08:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	b2d1      	uxtb	r1, r2
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <USART2_Interrupt()+0x74>)
 8000c14:	f882 1200 	strb.w	r1, [r2, #512]	; 0x200
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <USART2_Interrupt()+0x74>)
 8000c1c:	5c9b      	ldrb	r3, [r3, r2]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <USART2_Interrupt()+0x70>)
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	e00b      	b.n	8000c3e <USART2_Interrupt()+0x66>
        }
        else
        {
            /* The entire message has been sent, deactivate further interrupts triggered by TXE */
            ((USART_Registers_t*)USART2_ADDRESS)->CR1 &= ~(1 << USART_CR1_BitPos::TXEIE);
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <USART2_Interrupt()+0x70>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <USART2_Interrupt()+0x70>)
 8000c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c30:	60d3      	str	r3, [r2, #12]
            /* Deactivate the NVIC interrupt for USART */
            NVIC::NVIC_DisableInterrupt(USART2_INT_POS);
 8000c32:	2026      	movs	r0, #38	; 0x26
 8000c34:	f7ff fbf0 	bl	8000418 <NVIC::NVIC_DisableInterrupt(unsigned char)>

            /* Set the usart state back to available */
            USART2.currentState = USART_AVAILABLE;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <USART2_Interrupt()+0x78>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	729a      	strb	r2, [r3, #10]
        }

    }

    /* 2. Interrupt was triggered by a received byte*/
    USART2_RxInterruptCallback();
 8000c3e:	f7ff fb9d 	bl	800037c <USART2_RxInterruptCallback()>
    
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40004400 	.word	0x40004400
 8000c4c:	20000258 	.word	0x20000258
 8000c50:	20000024 	.word	0x20000024

08000c54 <USART1_RxInterruptCallback()>:

void USART1_RxInterruptCallback()
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

void USART2_RxInterruptCallback()
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
    
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <USART6_RxInterruptCallback()>:

void USART6_RxInterruptCallback()
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
    
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <__static_initialization_and_destruction_0(int, int)>:
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d110      	bne.n	8000caa <__static_initialization_and_destruction_0(int, int)+0x32>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10b      	bne.n	8000caa <__static_initialization_and_destruction_0(int, int)+0x32>
USART USART2((USART_Registers_t*)USART2_ADDRESS);
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__static_initialization_and_destruction_0(int, int)+0x3c>)
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <__static_initialization_and_destruction_0(int, int)+0x40>)
 8000c96:	f000 f837 	bl	8000d08 <USART::USART(USART_Registers_t*)>
USART USART1((USART_Registers_t*)USART1_ADDRESS);
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__static_initialization_and_destruction_0(int, int)+0x44>)
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <__static_initialization_and_destruction_0(int, int)+0x48>)
 8000c9e:	f000 f833 	bl	8000d08 <USART::USART(USART_Registers_t*)>
USART USART6((USART_Registers_t*)USART6_ADDRESS);
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__static_initialization_and_destruction_0(int, int)+0x4c>)
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <__static_initialization_and_destruction_0(int, int)+0x50>)
 8000ca6:	f000 f82f 	bl	8000d08 <USART::USART(USART_Registers_t*)>
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	20000024 	.word	0x20000024
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	20000034 	.word	0x20000034
 8000cc4:	40011400 	.word	0x40011400
 8000cc8:	20000044 	.word	0x20000044

08000ccc <_GLOBAL__sub_I_USART2>:
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff ffcf 	bl	8000c78 <__static_initialization_and_destruction_0(int, int)>
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <GPIO::GPIO(GPIO_registers_t*, GPIO_pin_t)>:
    const uint8_t no_registers = 10;


/* Methods area */
public:
    GPIO(GPIO_registers_t *GPIO_Address, GPIO_pin_t pin)
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	71fb      	strb	r3, [r7, #7]
        :registers(GPIO_Address), pin(pin)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	731a      	strb	r2, [r3, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	735a      	strb	r2, [r3, #13]
        {
            // Clear all registers
            //memset(registers, 0, no_registers*sizeof(uint32_t));
        }
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <USART::USART(USART_Registers_t*)>:
    volatile static USART_MessageStr_t USART2_MessageStr;
    volatile static USART_MessageStr_t USART6_MessageStr;

/* Methods area */
public:
    USART(USART_Registers_t *usart_address)
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
        : word_length(WORD_LENTGTH_8BIT), no_stop_bits(NO_STOPBITS_1), baud_rate(9600u), parity(NO_PARITY), operation_mode(FULL_DUPLEX_MODE), currentState(USART_AVAILABLE), registers(usart_address) {}
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	705a      	strb	r2, [r3, #1]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	721a      	strb	r2, [r3, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	725a      	strb	r2, [r3, #9]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	729a      	strb	r2, [r3, #10]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...
